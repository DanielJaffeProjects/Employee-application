Index: managerPage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom tkinter import messagebox, ttk\r\nfrom datetime import datetime, timedelta\r\nimport sqlConnector  # Assuming this is your custom module for database connections\r\n\r\n\r\nclass ManageEmployees(tk.Frame):\r\n    def __init__(self, parent, controller):\r\n        super().__init__(parent)\r\n        self.controller = controller\r\n        self.configure(bg=\"white\")  # Set background color for the frame\r\n\r\n        # Initialize weekly start dates for Expenses, Merchandise, Gross Profit History (set to Monday)\r\n        self.current_week_start = datetime.now().date() - timedelta(days=datetime.now().date().weekday())\r\n        self.current_merch_week_start = datetime.now().date() - timedelta(days=datetime.now().date().weekday())\r\n        self.current_profit_week_start = datetime.now().date() - timedelta(days=datetime.now().date().weekday())\r\n\r\n        # For Payroll, initialize with the most recent Sunday\r\n        self.current_payroll_sunday = self.get_most_recent_sunday(datetime.now().date())\r\n\r\n        # For Employee History, initialize current date (daily)\r\n        self.current_date = datetime.now().date()\r\n\r\n        # Create the bottom frame (for logout button)\r\n        self.create_bottom_frame()\r\n\r\n        # -------------------------------\r\n        # Top Frame (Store Selection and Employee Name)\r\n        # -------------------------------\r\n        top_frame = tk.Frame(self, bg=\"white\", bd=1, relief=\"solid\")\r\n        top_frame.pack(side=\"top\", fill=\"x\", padx=10, pady=10)\r\n\r\n        # Centered label (ALOHA)\r\n        aloha_label = tk.Label(top_frame, text=\"ALOHA\", font=(\"Helvetica\", 14), bg=\"white\", fg=\"black\")\r\n        aloha_label.place(relx=0.5, rely=0.5, anchor=\"center\")\r\n\r\n        # Right label (name of employee)\r\n        tk.Label(top_frame, text=\"Name of employee\", font=(\"Helvetica\", 14), bg=\"white\", fg=\"black\").pack(side=\"right\",\r\n                                                                                                          padx=(5, 10))\r\n\r\n        # Store selection dropdown\r\n        selected_store = tk.StringVar()\r\n        selected_store.set(\"Store 1\")  # Default store\r\n        store_options = [\"Store 1\", \"Store 2\", \"Store 3\", \"Store 4\"]\r\n        store_dropdown = tk.OptionMenu(top_frame, selected_store, *store_options)\r\n        store_dropdown.config(font=(\"Helvetica\", 14), bg=\"white\", fg=\"black\", relief=\"solid\", bd=2)\r\n        store_dropdown.pack(side=\"left\", padx=10, pady=5)\r\n\r\n        # -------------------------------\r\n        # Main Layout (Left Tabs and Right Content)\r\n        # -------------------------------\r\n        main_frame = tk.Frame(self, bg=\"white\")\r\n        main_frame.pack(fill=\"both\", expand=True)\r\n\r\n        # Left Panel for Tabs\r\n        tab_frame = tk.Frame(main_frame, bg=\"white\", width=250, bd=1, relief=\"solid\")\r\n        tab_frame.pack(side=\"left\", fill=\"y\", padx=10, pady=10)\r\n\r\n        # Right Panel for Content\r\n        content_frame = tk.Frame(main_frame, bg=\"white\", bd=1, relief=\"solid\")\r\n        content_frame.pack(side=\"right\", fill=\"both\", expand=True, padx=10, pady=10)\r\n        content_frame.grid_rowconfigure(0, weight=1)\r\n        content_frame.grid_columnconfigure(0, weight=1)\r\n\r\n        # Dictionary to hold the tabs\r\n        tabs = {}\r\n\r\n        # -------------------------------\r\n        # Enter Invoice Tab\r\n        # -------------------------------\r\n        enter_invoice_frame = tk.Frame(content_frame, bg=\"white\")\r\n        enter_invoice_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tk.Label(enter_invoice_frame, text=\"Enter Invoice\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        # Invoice fields\r\n        fields = [\"Invoice ID:\", \"Date:\", \"Company:\", \"Paid (Yes/No):\", \"Amount:\", \"Amount Paid:\"]\r\n        entries = []\r\n        for field in fields:\r\n            tk.Label(enter_invoice_frame, text=field, font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n            entry = tk.Entry(enter_invoice_frame, font=(\"Helvetica\", 14))\r\n            entry.pack()\r\n            entries.append(entry)\r\n\r\n        # Submit button\r\n        tk.Button(enter_invoice_frame, text=\"Submit Invoice\", font=(\"Helvetica\", 14),\r\n                  command=lambda: self.submit_invoice(*[entry.get() for entry in entries])).pack(pady=10)\r\n\r\n        tabs[\"Enter Invoice\"] = enter_invoice_frame\r\n\r\n        # -------------------------------\r\n        # Employee History Tab (Daily)\r\n        # -------------------------------\r\n        employee_history_frame = tk.Frame(content_frame, bg=\"white\")\r\n        employee_history_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tabs[\"Employee History\"] = employee_history_frame\r\n\r\n        tk.Label(employee_history_frame, text=\"Employee History\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        # Navigation Frame for Date Control\r\n        nav_frame = tk.Frame(employee_history_frame, bg=\"white\")\r\n        nav_frame.pack(pady=10)\r\n        prev_button = tk.Button(nav_frame, text=\"<\", font=(\"Helvetica\", 14), command=self.previous_day)\r\n        prev_button.pack(side=\"left\", padx=5)\r\n        self.date_label = tk.Label(nav_frame, text=self.current_date.strftime(\"%Y-%m-%d\"), font=(\"Helvetica\", 14), bg=\"white\")\r\n        self.date_label.pack(side=\"left\", padx=5)\r\n        next_button = tk.Button(nav_frame, text=\">\", font=(\"Helvetica\", 14), command=self.next_day)\r\n        next_button.pack(side=\"left\", padx=5)\r\n\r\n        # Date Entry for Manual Date Selection\r\n        tk.Label(employee_history_frame, text=\"Enter Date (YYYY-MM-DD):\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(20,5))\r\n        self.date_entry = tk.Entry(employee_history_frame, font=(\"Helvetica\", 14))\r\n        self.date_entry.pack(pady=5)\r\n        tk.Button(employee_history_frame, text=\"Go\", font=(\"Helvetica\", 14), command=self.set_date_from_entry).pack(pady=5)\r\n\r\n        # Table to Display Employee History\r\n        columns = (\"Employee\", \"Clock-In\", \"Clock-Out\", \"Hours Worked\")\r\n        self.history_tree = ttk.Treeview(employee_history_frame, columns=columns, show=\"headings\")\r\n        for col in columns:\r\n            self.history_tree.heading(col, text=col)\r\n        self.history_tree.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n\r\n        # Placeholder for No Records\r\n        self.history_placeholder = tk.Label(employee_history_frame, text=\"\", font=(\"Helvetica\", 12), bg=\"white\")\r\n        self.history_placeholder.pack(pady=20)\r\n\r\n        # Update the Display\r\n        self.update_history_display()\r\n\r\n        # -------------------------------\r\n        # Expenses History Tab (Weekly)\r\n        # -------------------------------\r\n        expenses_history_frame = tk.Frame(content_frame, bg=\"white\")\r\n        expenses_history_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tabs[\"Expenses History\"] = expenses_history_frame\r\n\r\n        tk.Label(expenses_history_frame, text=\"Expenses History\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        # Navigation Frame for Week Control\r\n        exp_nav_frame = tk.Frame(expenses_history_frame, bg=\"white\")\r\n        exp_nav_frame.pack(pady=10)\r\n        prev_week_btn = tk.Button(exp_nav_frame, text=\"<\", font=(\"Helvetica\", 14), command=self.previous_week)\r\n        prev_week_btn.pack(side=\"left\", padx=5)\r\n        self.week_label = tk.Label(exp_nav_frame, text=\"\", font=(\"Helvetica\", 14), bg=\"white\")\r\n        self.week_label.pack(side=\"left\", padx=5)\r\n        next_week_btn = tk.Button(exp_nav_frame, text=\">\", font=(\"Helvetica\", 14), command=self.next_week)\r\n        next_week_btn.pack(side=\"left\", padx=5)\r\n\r\n        # Date Entry for Manual Week Selection\r\n        tk.Label(expenses_history_frame, text=\"Enter Date (YYYY-MM-DD):\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(20,5))\r\n        self.week_entry = tk.Entry(expenses_history_frame, font=(\"Helvetica\", 14))\r\n        self.week_entry.pack(pady=5)\r\n        tk.Button(expenses_history_frame, text=\"Go\", font=(\"Helvetica\", 14), command=self.set_week_from_entry).pack(pady=5)\r\n\r\n        # Table to Display Expenses History\r\n        columns = (\"Date\", \"Expense Type\", \"Amount\")\r\n        self.expenses_tree = ttk.Treeview(expenses_history_frame, columns=columns, show=\"headings\")\r\n        for col in columns:\r\n            self.expenses_tree.heading(col, text=col)\r\n        self.expenses_tree.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n\r\n        # Placeholder for No Records\r\n        self.expenses_placeholder = tk.Label(expenses_history_frame, text=\"\", font=(\"Helvetica\", 12), bg=\"white\")\r\n        self.expenses_placeholder.pack(pady=20)\r\n\r\n        # Update the Display\r\n        self.update_expenses_history_display()\r\n\r\n        # -------------------------------\r\n        # Merchandise History Tab (Weekly)\r\n        # -------------------------------\r\n        merch_history_frame = tk.Frame(content_frame, bg=\"white\")\r\n        merch_history_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tabs[\"Merchandise History\"] = merch_history_frame\r\n\r\n        tk.Label(merch_history_frame, text=\"Merchandise History\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        # Navigation Frame for Week Control\r\n        merch_nav_frame = tk.Frame(merch_history_frame, bg=\"white\")\r\n        merch_nav_frame.pack(pady=10)\r\n        prev_merch_btn = tk.Button(merch_nav_frame, text=\"<\", font=(\"Helvetica\", 14), command=self.previous_merch_week)\r\n        prev_merch_btn.pack(side=\"left\", padx=5)\r\n        self.merch_week_label = tk.Label(merch_nav_frame, text=\"\", font=(\"Helvetica\", 14), bg=\"white\")\r\n        self.merch_week_label.pack(side=\"left\", padx=5)\r\n        next_merch_btn = tk.Button(merch_nav_frame, text=\">\", font=(\"Helvetica\", 14), command=self.next_merch_week)\r\n        next_merch_btn.pack(side=\"left\", padx=5)\r\n\r\n        # Date Entry for Manual Week Selection\r\n        tk.Label(merch_history_frame, text=\"Enter Date (YYYY-MM-DD):\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(20,5))\r\n        self.merch_week_entry = tk.Entry(merch_history_frame, font=(\"Helvetica\", 14))\r\n        self.merch_week_entry.pack(pady=5)\r\n        tk.Button(merch_history_frame, text=\"Go\", font=(\"Helvetica\", 14), command=self.set_merch_week_from_entry).pack(pady=5)\r\n\r\n        # Table to Display Merchandise History\r\n        columns = (\"Date\", \"Merchandise Type\", \"Amount\")\r\n        self.merch_tree = ttk.Treeview(merch_history_frame, columns=columns, show=\"headings\")\r\n        for col in columns:\r\n            self.merch_tree.heading(col, text=col)\r\n        self.merch_tree.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n\r\n        # Placeholder for No Records\r\n        self.merch_placeholder = tk.Label(merch_history_frame, text=\"\", font=(\"Helvetica\", 12), bg=\"white\")\r\n        self.merch_placeholder.pack(pady=20)\r\n\r\n        # Update the Display\r\n        self.update_merch_history_display()\r\n\r\n        # -------------------------------\r\n        # Gross Profit Tab (Weekly)\r\n        # -------------------------------\r\n        gross_profit_frame = tk.Frame(content_frame, bg=\"white\")\r\n        gross_profit_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tabs[\"Gross Profit\"] = gross_profit_frame\r\n\r\n        tk.Label(gross_profit_frame, text=\"Gross Profit\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        # Navigation Frame for Week Control\r\n        profit_nav_frame = tk.Frame(gross_profit_frame, bg=\"white\")\r\n        profit_nav_frame.pack(pady=10)\r\n        prev_profit_btn = tk.Button(profit_nav_frame, text=\"<\", font=(\"Helvetica\", 14), command=self.previous_profit_week)\r\n        prev_profit_btn.pack(side=\"left\", padx=5)\r\n        self.profit_week_label = tk.Label(profit_nav_frame, text=\"\", font=(\"Helvetica\", 14), bg=\"white\")\r\n        self.profit_week_label.pack(side=\"left\", padx=5)\r\n        next_profit_btn = tk.Button(profit_nav_frame, text=\">\", font=(\"Helvetica\", 14), command=self.next_profit_week)\r\n        next_profit_btn.pack(side=\"left\", padx=5)\r\n\r\n        # Date Entry for Manual Week Selection\r\n        tk.Label(gross_profit_frame, text=\"Enter Date (YYYY-MM-DD):\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(20,5))\r\n        self.profit_week_entry = tk.Entry(gross_profit_frame, font=(\"Helvetica\", 14))\r\n        self.profit_week_entry.pack(pady=5)\r\n        tk.Button(gross_profit_frame, text=\"Go\", font=(\"Helvetica\", 14), command=self.set_profit_week_from_entry).pack(pady=5)\r\n\r\n        # Table to Display Gross Profit\r\n        columns = (\"Date\", \"Cash\", \"Credit\", \"Total\")\r\n        self.gross_profit_tree = ttk.Treeview(gross_profit_frame, columns=columns, show=\"headings\")\r\n        for col in columns:\r\n            self.gross_profit_tree.heading(col, text=col)\r\n        self.gross_profit_tree.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n\r\n        # Update the Display\r\n        self.update_gross_profit_display()\r\n\r\n        # -------------------------------\r\n        # Payroll Tab\r\n        # -------------------------------\r\n        payroll_frame = tk.Frame(content_frame, bg=\"white\")\r\n        payroll_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tabs[\"Payroll\"] = payroll_frame\r\n\r\n        tk.Label(payroll_frame, text=\"Payroll\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        # Employee selection dropdown\r\n        tk.Label(payroll_frame, text=\"Select Employee:\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(10,5))\r\n        self.payroll_employee_var = tk.StringVar()\r\n        self.payroll_employee_var.set(\"Alice\")\r\n        employees = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\r\n        payroll_dropdown = tk.OptionMenu(payroll_frame, self.payroll_employee_var, *employees)\r\n        payroll_dropdown.config(font=(\"Helvetica\", 14), bg=\"white\")\r\n        payroll_dropdown.pack(pady=5)\r\n\r\n        # Navigation Frame for Payroll Week Control\r\n        payroll_nav_frame = tk.Frame(payroll_frame, bg=\"white\")\r\n        payroll_nav_frame.pack(pady=10)\r\n        payroll_prev_btn = tk.Button(payroll_nav_frame, text=\"<\", font=(\"Helvetica\", 14), command=self.previous_payroll_week)\r\n        payroll_prev_btn.pack(side=\"left\", padx=5)\r\n        self.payroll_date_label = tk.Label(payroll_nav_frame, text=self.current_payroll_sunday.strftime(\"%Y-%m-%d\"), font=(\"Helvetica\", 14), bg=\"white\")\r\n        self.payroll_date_label.pack(side=\"left\", padx=5)\r\n        payroll_next_btn = tk.Button(payroll_nav_frame, text=\">\", font=(\"Helvetica\", 14), command=self.next_payroll_week)\r\n        payroll_next_btn.pack(side=\"left\", padx=5)\r\n\r\n        # Date Entry for Manual Payroll Week Selection\r\n        tk.Label(payroll_frame, text=\"Enter Date (YYYY-MM-DD):\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(20,5))\r\n        self.payroll_date_entry = tk.Entry(payroll_frame, font=(\"Helvetica\", 14))\r\n        self.payroll_date_entry.pack(pady=5)\r\n        tk.Button(payroll_frame, text=\"Go\", font=(\"Helvetica\", 14), command=self.set_payroll_date_from_entry).pack(pady=5)\r\n\r\n        # Table to Display Payroll History\r\n        columns = (\"Date\", \"Pay\")\r\n        self.payroll_tree = ttk.Treeview(payroll_frame, columns=columns, show=\"headings\")\r\n        for col in columns:\r\n            self.payroll_tree.heading(col, text=col)\r\n        self.payroll_tree.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n\r\n        # Update the Display\r\n        self.update_payroll_display()\r\n\r\n        # -------------------------------\r\n        # Function to Show Selected Tab\r\n        # -------------------------------\r\n        def show_tab(tab_name):\r\n            tabs[tab_name].tkraise()\r\n\r\n        # Add buttons for each tab in the left panel\r\n        for title in tabs:\r\n            btn = tk.Button(tab_frame, text=title, font=(\"Helvetica\", 14), fg=\"black\", bg=\"white\",\r\n                            relief=\"solid\", bd=2, command=lambda t=title: show_tab(t), width=25, height=2)\r\n            btn.pack(pady=5, padx=10, fill=\"x\")\r\n\r\n        # Show the default tab\r\n        show_tab(\"Enter Invoice\")\r\n\r\n    # -------------------------------\r\n    # Bottom Frame (Logout Button)\r\n    # -------------------------------\r\n    def create_bottom_frame(self):\r\n        \"\"\"Creates a bottom frame for the logout button.\"\"\"\r\n        bottom_frame = tk.Frame(self, bg=\"white\", bd=1, relief=\"solid\")\r\n        bottom_frame.pack(side=\"bottom\", fill=\"x\", padx=10, pady=10)\r\n\r\n        logout_button = tk.Button(bottom_frame, text=\"Logout\", font=(\"Helvetica\", 14), bg=\"red\", fg=\"white\",\r\n                                  command=self.logout)\r\n        logout_button.pack(side=\"left\", padx=10, pady=5)\r\n\r\n    # -------------------------------\r\n    # Logout Method\r\n    # -------------------------------\r\n    def logout(self):\r\n        \"\"\"Handles logout and returns to the login page.\"\"\"\r\n        confirm = messagebox.askyesno(\"Logout\", \"Are you sure you want to logout?\")\r\n        if confirm:\r\n            self.controller.show_frame(\"LoginPage\")\r\n\r\n    # -------------------------------\r\n    # Employee History Methods\r\n    # -------------------------------\r\n    def update_history_display(self):\r\n        \"\"\"Updates the employee history table with data for the current date.\"\"\"\r\n        # Clear the table\r\n        for row in self.history_tree.get_children():\r\n            self.history_tree.delete(row)\r\n\r\n        # Placeholder data (replace with actual data from your database)\r\n        placeholder_data = [\r\n            (\"Alice\", \"09:00 AM\", \"05:00 PM\", \"8.0\"),\r\n            (\"Bob\", \"10:00 AM\", \"06:00 PM\", \"8.0\"),\r\n            (\"Charlie\", \"08:30 AM\", \"04:30 PM\", \"8.0\"),\r\n        ]\r\n\r\n        if placeholder_data:\r\n            # Insert data into the table\r\n            for data in placeholder_data:\r\n                self.history_tree.insert(\"\", \"end\", values=data)\r\n            self.history_placeholder.config(text=\"\")\r\n        else:\r\n            # Show a message if no records are found\r\n            self.history_placeholder.config(text=f\"No clock-in records for {self.current_date.strftime('%Y-%m-%d')}.\")\r\n\r\n    def previous_day(self):\r\n        \"\"\"Navigates to the previous day.\"\"\"\r\n        self.current_date -= timedelta(days=1)\r\n        self.date_label.config(text=self.current_date.strftime(\"%Y-%m-%d\"))\r\n        self.update_history_display()\r\n\r\n    def next_day(self):\r\n        \"\"\"Navigates to the next day.\"\"\"\r\n        self.current_date += timedelta(days=1)\r\n        self.date_label.config(text=self.current_date.strftime(\"%Y-%m-%d\"))\r\n        self.update_history_display()\r\n\r\n    def set_date_from_entry(self):\r\n        \"\"\"Sets the date based on user input.\"\"\"\r\n        try:\r\n            new_date = datetime.strptime(self.date_entry.get(), \"%Y-%m-%d\").date()\r\n            self.current_date = new_date\r\n            self.date_label.config(text=self.current_date.strftime(\"%Y-%m-%d\"))\r\n            self.update_history_display()\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Date\", \"Please enter a valid date in YYYY-MM-DD format.\")\r\n\r\n    # -------------------------------\r\n    # Expenses History Methods\r\n    # -------------------------------\r\n    def update_expenses_history_display(self):\r\n        \"\"\"Updates the expenses history table with data for the current week.\"\"\"\r\n        # Clear the table\r\n        for row in self.expenses_tree.get_children():\r\n            self.expenses_tree.delete(row)\r\n\r\n        # Placeholder data (replace with actual data from your database)\r\n        placeholder_data = [\r\n            (\"2023-10-02\", \"Supplies\", \"$100\"),\r\n            (\"2023-10-03\", \"Utilities\", \"$200\"),\r\n            (\"2023-10-04\", \"Maintenance\", \"$150\"),\r\n        ]\r\n\r\n        if placeholder_data:\r\n            # Insert data into the table\r\n            for data in placeholder_data:\r\n                self.expenses_tree.insert(\"\", \"end\", values=data)\r\n            self.expenses_placeholder.config(text=\"\")\r\n        else:\r\n            # Show a message if no records are found\r\n            week_end = self.current_week_start + timedelta(days=6)\r\n            self.expenses_placeholder.config(\r\n                text=f\"No expenses recorded for the week of {self.current_week_start.strftime('%Y-%m-%d')} to {week_end.strftime('%Y-%m-%d')}.\")\r\n\r\n    def previous_week(self):\r\n        \"\"\"Navigates to the previous week.\"\"\"\r\n        self.current_week_start -= timedelta(weeks=1)\r\n        self.update_expenses_history_display()\r\n\r\n    def next_week(self):\r\n        \"\"\"Navigates to the next week.\"\"\"\r\n        self.current_week_start += timedelta(weeks=1)\r\n        self.update_expenses_history_display()\r\n\r\n    def set_week_from_entry(self):\r\n        \"\"\"Sets the week based on user input.\"\"\"\r\n        try:\r\n            new_date = datetime.strptime(self.week_entry.get(), \"%Y-%m-%d\").date()\r\n            self.current_week_start = new_date - timedelta(days=new_date.weekday())\r\n            self.update_expenses_history_display()\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Date\", \"Please enter a valid date in YYYY-MM-DD format.\")\r\n\r\n    # -------------------------------\r\n    # Merchandise History Methods\r\n    # -------------------------------\r\n    def update_merch_history_display(self):\r\n        \"\"\"Updates the merchandise history table with data for the current week.\"\"\"\r\n        # Clear the table\r\n        for row in self.merch_tree.get_children():\r\n            self.merch_tree.delete(row)\r\n\r\n        # Placeholder data (replace with actual data from your database)\r\n        placeholder_data = [\r\n            (\"2023-10-02\", \"Electronics\", \"$500\"),\r\n            (\"2023-10-03\", \"Clothing\", \"$300\"),\r\n            (\"2023-10-04\", \"Furniture\", \"$700\"),\r\n        ]\r\n\r\n        if placeholder_data:\r\n            # Insert data into the table\r\n            for data in placeholder_data:\r\n                self.merch_tree.insert(\"\", \"end\", values=data)\r\n            self.merch_placeholder.config(text=\"\")\r\n        else:\r\n            # Show a message if no records are found\r\n            merch_week_end = self.current_merch_week_start + timedelta(days=6)\r\n            self.merch_placeholder.config(\r\n                text=f\"No merchandise recorded for the week of {self.current_merch_week_start.strftime('%Y-%m-%d')} to {merch_week_end.strftime('%Y-%m-%d')}.\")\r\n\r\n    def previous_merch_week(self):\r\n        \"\"\"Navigates to the previous merchandise week.\"\"\"\r\n        self.current_merch_week_start -= timedelta(weeks=1)\r\n        self.update_merch_history_display()\r\n\r\n    def next_merch_week(self):\r\n        \"\"\"Navigates to the next merchandise week.\"\"\"\r\n        self.current_merch_week_start += timedelta(weeks=1)\r\n        self.update_merch_history_display()\r\n\r\n    def set_merch_week_from_entry(self):\r\n        \"\"\"Sets the merchandise week based on user input.\"\"\"\r\n        try:\r\n            new_date = datetime.strptime(self.merch_week_entry.get(), \"%Y-%m-%d\").date()\r\n            self.current_merch_week_start = new_date - timedelta(days=new_date.weekday())\r\n            self.update_merch_history_display()\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Date\", \"Please enter a valid date in YYYY-MM-DD format.\")\r\n\r\n    # -------------------------------\r\n    # Gross Profit Methods\r\n    # -------------------------------\r\n    def update_gross_profit_display(self):\r\n        \"\"\"Updates the gross profit table with data for the current week.\"\"\"\r\n        # Clear the table\r\n        for row in self.gross_profit_tree.get_children():\r\n            self.gross_profit_tree.delete(row)\r\n\r\n        # Placeholder data (replace with actual data from your database)\r\n        placeholder_data = [\r\n            (\"2023-10-02\", \"$1000\", \"$500\", \"$1500\"),\r\n            (\"2023-10-03\", \"$1200\", \"$600\", \"$1800\"),\r\n            (\"2023-10-04\", \"$900\", \"$400\", \"$1300\"),\r\n        ]\r\n\r\n        if placeholder_data:\r\n            # Insert data into the table\r\n            for data in placeholder_data:\r\n                self.gross_profit_tree.insert(\"\", \"end\", values=data)\r\n        else:\r\n            # Show a message if no records are found\r\n            profit_week_end = self.current_profit_week_start + timedelta(days=6)\r\n            self.profit_week_label.config(text=f\"{self.current_profit_week_start.strftime('%Y-%m-%d')} to {profit_week_end.strftime('%Y-%m-%d')}\")\r\n\r\n    def previous_profit_week(self):\r\n        \"\"\"Navigates to the previous profit week.\"\"\"\r\n        self.current_profit_week_start -= timedelta(weeks=1)\r\n        self.update_gross_profit_display()\r\n\r\n    def next_profit_week(self):\r\n        \"\"\"Navigates to the next profit week.\"\"\"\r\n        self.current_profit_week_start += timedelta(weeks=1)\r\n        self.update_gross_profit_display()\r\n\r\n    def set_profit_week_from_entry(self):\r\n        \"\"\"Sets the profit week based on user input.\"\"\"\r\n        try:\r\n            new_date = datetime.strptime(self.profit_week_entry.get(), \"%Y-%m-%d\").date()\r\n            self.current_profit_week_start = new_date - timedelta(days=new_date.weekday())\r\n            self.update_gross_profit_display()\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Date\", \"Please enter a valid date in YYYY-MM-DD format.\")\r\n\r\n    # -------------------------------\r\n    # Payroll Methods\r\n    # -------------------------------\r\n    def get_most_recent_sunday(self, d):\r\n        \"\"\"Returns the most recent Sunday for a given date.\"\"\"\r\n        days_since_sunday = (d.weekday() + 1) % 7\r\n        return d - timedelta(days=days_since_sunday)\r\n\r\n    def update_payroll_display(self):\r\n        \"\"\"Updates the payroll table with data for the current payroll week.\"\"\"\r\n        # Clear the table\r\n        for row in self.payroll_tree.get_children():\r\n            self.payroll_tree.delete(row)\r\n\r\n        # Placeholder data (replace with actual data from your database)\r\n        placeholder_data = [\r\n            (\"2023-10-01\", \"$1200\"),\r\n            (\"2023-09-24\", \"$1100\"),\r\n            (\"2023-09-17\", \"$1000\"),\r\n            (\"2023-09-10\", \"$950\"),\r\n        ]\r\n\r\n        if placeholder_data:\r\n            # Insert data into the table\r\n            for data in placeholder_data:\r\n                self.payroll_tree.insert(\"\", \"end\", values=data)\r\n        else:\r\n            # Show a message if no records are found\r\n            self.payroll_date_label.config(text=self.current_payroll_sunday.strftime(\"%Y-%m-%d\"))\r\n\r\n    def previous_payroll_week(self):\r\n        \"\"\"Navigates to the previous payroll week.\"\"\"\r\n        self.current_payroll_sunday -= timedelta(weeks=1)\r\n        self.payroll_date_label.config(text=self.current_payroll_sunday.strftime(\"%Y-%m-%d\"))\r\n        self.update_payroll_display()\r\n\r\n    def next_payroll_week(self):\r\n        \"\"\"Navigates to the next payroll week.\"\"\"\r\n        self.current_payroll_sunday += timedelta(weeks=1)\r\n        self.payroll_date_label.config(text=self.current_payroll_sunday.strftime(\"%Y-%m-%d\"))\r\n        self.update_payroll_display()\r\n\r\n    def set_payroll_date_from_entry(self):\r\n        \"\"\"Sets the payroll date based on user input.\"\"\"\r\n        try:\r\n            new_date = datetime.strptime(self.payroll_date_entry.get(), \"%Y-%m-%d\").date()\r\n            self.current_payroll_sunday = self.get_most_recent_sunday(new_date)\r\n            self.payroll_date_label.config(text=self.current_payroll_sunday.strftime(\"%Y-%m-%d\"))\r\n            self.update_payroll_display()\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Date\", \"Please enter a valid date in YYYY-MM-DD format.\")\r\n\r\n\r\n# For testing purposes, run this file directly.\r\nif __name__ == '__main__':\r\n    root = tk.Tk()\r\n    root.title(\"EMS Application - Manage Employees\")\r\n    root.geometry(\"900x750\")\r\n    app = ManageEmployees(root, None)\r\n    app.pack(fill=\"both\", expand=True)\r\n    root.mainloop()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/managerPage.py b/managerPage.py
--- a/managerPage.py	(revision 0d63fd4cf7412ed2a613965f9b2c8d3acb2dc17b)
+++ b/managerPage.py	(date 1742868099410)
@@ -1,565 +1,12 @@
 import tkinter as tk
 from tkinter import messagebox, ttk
-from datetime import datetime, timedelta
-import sqlConnector  # Assuming this is your custom module for database connections
+from manageEmployees import ManageEmployees
 
-
-class ManageEmployees(tk.Frame):
+class ManagerPage(tk.Frame):
     def __init__(self, parent, controller):
         super().__init__(parent)
         self.controller = controller
-        self.configure(bg="white")  # Set background color for the frame
-
-        # Initialize weekly start dates for Expenses, Merchandise, Gross Profit History (set to Monday)
-        self.current_week_start = datetime.now().date() - timedelta(days=datetime.now().date().weekday())
-        self.current_merch_week_start = datetime.now().date() - timedelta(days=datetime.now().date().weekday())
-        self.current_profit_week_start = datetime.now().date() - timedelta(days=datetime.now().date().weekday())
-
-        # For Payroll, initialize with the most recent Sunday
-        self.current_payroll_sunday = self.get_most_recent_sunday(datetime.now().date())
-
-        # For Employee History, initialize current date (daily)
-        self.current_date = datetime.now().date()
-
-        # Create the bottom frame (for logout button)
-        self.create_bottom_frame()
-
-        # -------------------------------
-        # Top Frame (Store Selection and Employee Name)
-        # -------------------------------
-        top_frame = tk.Frame(self, bg="white", bd=1, relief="solid")
-        top_frame.pack(side="top", fill="x", padx=10, pady=10)
-
-        # Centered label (ALOHA)
-        aloha_label = tk.Label(top_frame, text="ALOHA", font=("Helvetica", 14), bg="white", fg="black")
-        aloha_label.place(relx=0.5, rely=0.5, anchor="center")
-
-        # Right label (name of employee)
-        tk.Label(top_frame, text="Name of employee", font=("Helvetica", 14), bg="white", fg="black").pack(side="right",
-                                                                                                          padx=(5, 10))
-
-        # Store selection dropdown
-        selected_store = tk.StringVar()
-        selected_store.set("Store 1")  # Default store
-        store_options = ["Store 1", "Store 2", "Store 3", "Store 4"]
-        store_dropdown = tk.OptionMenu(top_frame, selected_store, *store_options)
-        store_dropdown.config(font=("Helvetica", 14), bg="white", fg="black", relief="solid", bd=2)
-        store_dropdown.pack(side="left", padx=10, pady=5)
-
-        # -------------------------------
-        # Main Layout (Left Tabs and Right Content)
-        # -------------------------------
-        main_frame = tk.Frame(self, bg="white")
-        main_frame.pack(fill="both", expand=True)
-
-        # Left Panel for Tabs
-        tab_frame = tk.Frame(main_frame, bg="white", width=250, bd=1, relief="solid")
-        tab_frame.pack(side="left", fill="y", padx=10, pady=10)
-
-        # Right Panel for Content
-        content_frame = tk.Frame(main_frame, bg="white", bd=1, relief="solid")
-        content_frame.pack(side="right", fill="both", expand=True, padx=10, pady=10)
-        content_frame.grid_rowconfigure(0, weight=1)
-        content_frame.grid_columnconfigure(0, weight=1)
-
-        # Dictionary to hold the tabs
-        tabs = {}
-
-        # -------------------------------
-        # Enter Invoice Tab
-        # -------------------------------
-        enter_invoice_frame = tk.Frame(content_frame, bg="white")
-        enter_invoice_frame.grid(row=0, column=0, sticky="nsew")
-        tk.Label(enter_invoice_frame, text="Enter Invoice", font=("Helvetica", 18), bg="white").pack(pady=10)
-
-        # Invoice fields
-        fields = ["Invoice ID:", "Date:", "Company:", "Paid (Yes/No):", "Amount:", "Amount Paid:"]
-        entries = []
-        for field in fields:
-            tk.Label(enter_invoice_frame, text=field, font=("Helvetica", 14), bg="white").pack()
-            entry = tk.Entry(enter_invoice_frame, font=("Helvetica", 14))
-            entry.pack()
-            entries.append(entry)
-
-        # Submit button
-        tk.Button(enter_invoice_frame, text="Submit Invoice", font=("Helvetica", 14),
-                  command=lambda: self.submit_invoice(*[entry.get() for entry in entries])).pack(pady=10)
-
-        tabs["Enter Invoice"] = enter_invoice_frame
-
-        # -------------------------------
-        # Employee History Tab (Daily)
-        # -------------------------------
-        employee_history_frame = tk.Frame(content_frame, bg="white")
-        employee_history_frame.grid(row=0, column=0, sticky="nsew")
-        tabs["Employee History"] = employee_history_frame
-
-        tk.Label(employee_history_frame, text="Employee History", font=("Helvetica", 18), bg="white").pack(pady=10)
-
-        # Navigation Frame for Date Control
-        nav_frame = tk.Frame(employee_history_frame, bg="white")
-        nav_frame.pack(pady=10)
-        prev_button = tk.Button(nav_frame, text="<", font=("Helvetica", 14), command=self.previous_day)
-        prev_button.pack(side="left", padx=5)
-        self.date_label = tk.Label(nav_frame, text=self.current_date.strftime("%Y-%m-%d"), font=("Helvetica", 14), bg="white")
-        self.date_label.pack(side="left", padx=5)
-        next_button = tk.Button(nav_frame, text=">", font=("Helvetica", 14), command=self.next_day)
-        next_button.pack(side="left", padx=5)
-
-        # Date Entry for Manual Date Selection
-        tk.Label(employee_history_frame, text="Enter Date (YYYY-MM-DD):", font=("Helvetica", 14), bg="white").pack(pady=(20,5))
-        self.date_entry = tk.Entry(employee_history_frame, font=("Helvetica", 14))
-        self.date_entry.pack(pady=5)
-        tk.Button(employee_history_frame, text="Go", font=("Helvetica", 14), command=self.set_date_from_entry).pack(pady=5)
-
-        # Table to Display Employee History
-        columns = ("Employee", "Clock-In", "Clock-Out", "Hours Worked")
-        self.history_tree = ttk.Treeview(employee_history_frame, columns=columns, show="headings")
-        for col in columns:
-            self.history_tree.heading(col, text=col)
-        self.history_tree.pack(fill="both", expand=True, padx=10, pady=10)
-
-        # Placeholder for No Records
-        self.history_placeholder = tk.Label(employee_history_frame, text="", font=("Helvetica", 12), bg="white")
-        self.history_placeholder.pack(pady=20)
-
-        # Update the Display
-        self.update_history_display()
-
-        # -------------------------------
-        # Expenses History Tab (Weekly)
-        # -------------------------------
-        expenses_history_frame = tk.Frame(content_frame, bg="white")
-        expenses_history_frame.grid(row=0, column=0, sticky="nsew")
-        tabs["Expenses History"] = expenses_history_frame
-
-        tk.Label(expenses_history_frame, text="Expenses History", font=("Helvetica", 18), bg="white").pack(pady=10)
-
-        # Navigation Frame for Week Control
-        exp_nav_frame = tk.Frame(expenses_history_frame, bg="white")
-        exp_nav_frame.pack(pady=10)
-        prev_week_btn = tk.Button(exp_nav_frame, text="<", font=("Helvetica", 14), command=self.previous_week)
-        prev_week_btn.pack(side="left", padx=5)
-        self.week_label = tk.Label(exp_nav_frame, text="", font=("Helvetica", 14), bg="white")
-        self.week_label.pack(side="left", padx=5)
-        next_week_btn = tk.Button(exp_nav_frame, text=">", font=("Helvetica", 14), command=self.next_week)
-        next_week_btn.pack(side="left", padx=5)
-
-        # Date Entry for Manual Week Selection
-        tk.Label(expenses_history_frame, text="Enter Date (YYYY-MM-DD):", font=("Helvetica", 14), bg="white").pack(pady=(20,5))
-        self.week_entry = tk.Entry(expenses_history_frame, font=("Helvetica", 14))
-        self.week_entry.pack(pady=5)
-        tk.Button(expenses_history_frame, text="Go", font=("Helvetica", 14), command=self.set_week_from_entry).pack(pady=5)
-
-        # Table to Display Expenses History
-        columns = ("Date", "Expense Type", "Amount")
-        self.expenses_tree = ttk.Treeview(expenses_history_frame, columns=columns, show="headings")
-        for col in columns:
-            self.expenses_tree.heading(col, text=col)
-        self.expenses_tree.pack(fill="both", expand=True, padx=10, pady=10)
-
-        # Placeholder for No Records
-        self.expenses_placeholder = tk.Label(expenses_history_frame, text="", font=("Helvetica", 12), bg="white")
-        self.expenses_placeholder.pack(pady=20)
-
-        # Update the Display
-        self.update_expenses_history_display()
-
-        # -------------------------------
-        # Merchandise History Tab (Weekly)
-        # -------------------------------
-        merch_history_frame = tk.Frame(content_frame, bg="white")
-        merch_history_frame.grid(row=0, column=0, sticky="nsew")
-        tabs["Merchandise History"] = merch_history_frame
-
-        tk.Label(merch_history_frame, text="Merchandise History", font=("Helvetica", 18), bg="white").pack(pady=10)
-
-        # Navigation Frame for Week Control
-        merch_nav_frame = tk.Frame(merch_history_frame, bg="white")
-        merch_nav_frame.pack(pady=10)
-        prev_merch_btn = tk.Button(merch_nav_frame, text="<", font=("Helvetica", 14), command=self.previous_merch_week)
-        prev_merch_btn.pack(side="left", padx=5)
-        self.merch_week_label = tk.Label(merch_nav_frame, text="", font=("Helvetica", 14), bg="white")
-        self.merch_week_label.pack(side="left", padx=5)
-        next_merch_btn = tk.Button(merch_nav_frame, text=">", font=("Helvetica", 14), command=self.next_merch_week)
-        next_merch_btn.pack(side="left", padx=5)
-
-        # Date Entry for Manual Week Selection
-        tk.Label(merch_history_frame, text="Enter Date (YYYY-MM-DD):", font=("Helvetica", 14), bg="white").pack(pady=(20,5))
-        self.merch_week_entry = tk.Entry(merch_history_frame, font=("Helvetica", 14))
-        self.merch_week_entry.pack(pady=5)
-        tk.Button(merch_history_frame, text="Go", font=("Helvetica", 14), command=self.set_merch_week_from_entry).pack(pady=5)
-
-        # Table to Display Merchandise History
-        columns = ("Date", "Merchandise Type", "Amount")
-        self.merch_tree = ttk.Treeview(merch_history_frame, columns=columns, show="headings")
-        for col in columns:
-            self.merch_tree.heading(col, text=col)
-        self.merch_tree.pack(fill="both", expand=True, padx=10, pady=10)
-
-        # Placeholder for No Records
-        self.merch_placeholder = tk.Label(merch_history_frame, text="", font=("Helvetica", 12), bg="white")
-        self.merch_placeholder.pack(pady=20)
-
-        # Update the Display
-        self.update_merch_history_display()
-
-        # -------------------------------
-        # Gross Profit Tab (Weekly)
-        # -------------------------------
-        gross_profit_frame = tk.Frame(content_frame, bg="white")
-        gross_profit_frame.grid(row=0, column=0, sticky="nsew")
-        tabs["Gross Profit"] = gross_profit_frame
-
-        tk.Label(gross_profit_frame, text="Gross Profit", font=("Helvetica", 18), bg="white").pack(pady=10)
-
-        # Navigation Frame for Week Control
-        profit_nav_frame = tk.Frame(gross_profit_frame, bg="white")
-        profit_nav_frame.pack(pady=10)
-        prev_profit_btn = tk.Button(profit_nav_frame, text="<", font=("Helvetica", 14), command=self.previous_profit_week)
-        prev_profit_btn.pack(side="left", padx=5)
-        self.profit_week_label = tk.Label(profit_nav_frame, text="", font=("Helvetica", 14), bg="white")
-        self.profit_week_label.pack(side="left", padx=5)
-        next_profit_btn = tk.Button(profit_nav_frame, text=">", font=("Helvetica", 14), command=self.next_profit_week)
-        next_profit_btn.pack(side="left", padx=5)
-
-        # Date Entry for Manual Week Selection
-        tk.Label(gross_profit_frame, text="Enter Date (YYYY-MM-DD):", font=("Helvetica", 14), bg="white").pack(pady=(20,5))
-        self.profit_week_entry = tk.Entry(gross_profit_frame, font=("Helvetica", 14))
-        self.profit_week_entry.pack(pady=5)
-        tk.Button(gross_profit_frame, text="Go", font=("Helvetica", 14), command=self.set_profit_week_from_entry).pack(pady=5)
-
-        # Table to Display Gross Profit
-        columns = ("Date", "Cash", "Credit", "Total")
-        self.gross_profit_tree = ttk.Treeview(gross_profit_frame, columns=columns, show="headings")
-        for col in columns:
-            self.gross_profit_tree.heading(col, text=col)
-        self.gross_profit_tree.pack(fill="both", expand=True, padx=10, pady=10)
-
-        # Update the Display
-        self.update_gross_profit_display()
-
-        # -------------------------------
-        # Payroll Tab
-        # -------------------------------
-        payroll_frame = tk.Frame(content_frame, bg="white")
-        payroll_frame.grid(row=0, column=0, sticky="nsew")
-        tabs["Payroll"] = payroll_frame
-
-        tk.Label(payroll_frame, text="Payroll", font=("Helvetica", 18), bg="white").pack(pady=10)
-
-        # Employee selection dropdown
-        tk.Label(payroll_frame, text="Select Employee:", font=("Helvetica", 14), bg="white").pack(pady=(10,5))
-        self.payroll_employee_var = tk.StringVar()
-        self.payroll_employee_var.set("Alice")
-        employees = ["Alice", "Bob", "Charlie", "David"]
-        payroll_dropdown = tk.OptionMenu(payroll_frame, self.payroll_employee_var, *employees)
-        payroll_dropdown.config(font=("Helvetica", 14), bg="white")
-        payroll_dropdown.pack(pady=5)
-
-        # Navigation Frame for Payroll Week Control
-        payroll_nav_frame = tk.Frame(payroll_frame, bg="white")
-        payroll_nav_frame.pack(pady=10)
-        payroll_prev_btn = tk.Button(payroll_nav_frame, text="<", font=("Helvetica", 14), command=self.previous_payroll_week)
-        payroll_prev_btn.pack(side="left", padx=5)
-        self.payroll_date_label = tk.Label(payroll_nav_frame, text=self.current_payroll_sunday.strftime("%Y-%m-%d"), font=("Helvetica", 14), bg="white")
-        self.payroll_date_label.pack(side="left", padx=5)
-        payroll_next_btn = tk.Button(payroll_nav_frame, text=">", font=("Helvetica", 14), command=self.next_payroll_week)
-        payroll_next_btn.pack(side="left", padx=5)
-
-        # Date Entry for Manual Payroll Week Selection
-        tk.Label(payroll_frame, text="Enter Date (YYYY-MM-DD):", font=("Helvetica", 14), bg="white").pack(pady=(20,5))
-        self.payroll_date_entry = tk.Entry(payroll_frame, font=("Helvetica", 14))
-        self.payroll_date_entry.pack(pady=5)
-        tk.Button(payroll_frame, text="Go", font=("Helvetica", 14), command=self.set_payroll_date_from_entry).pack(pady=5)
-
-        # Table to Display Payroll History
-        columns = ("Date", "Pay")
-        self.payroll_tree = ttk.Treeview(payroll_frame, columns=columns, show="headings")
-        for col in columns:
-            self.payroll_tree.heading(col, text=col)
-        self.payroll_tree.pack(fill="both", expand=True, padx=10, pady=10)
-
-        # Update the Display
-        self.update_payroll_display()
-
-        # -------------------------------
-        # Function to Show Selected Tab
-        # -------------------------------
-        def show_tab(tab_name):
-            tabs[tab_name].tkraise()
-
-        # Add buttons for each tab in the left panel
-        for title in tabs:
-            btn = tk.Button(tab_frame, text=title, font=("Helvetica", 14), fg="black", bg="white",
-                            relief="solid", bd=2, command=lambda t=title: show_tab(t), width=25, height=2)
-            btn.pack(pady=5, padx=10, fill="x")
-
-        # Show the default tab
-        show_tab("Enter Invoice")
-
-    # -------------------------------
-    # Bottom Frame (Logout Button)
-    # -------------------------------
-    def create_bottom_frame(self):
-        """Creates a bottom frame for the logout button."""
-        bottom_frame = tk.Frame(self, bg="white", bd=1, relief="solid")
-        bottom_frame.pack(side="bottom", fill="x", padx=10, pady=10)
-
-        logout_button = tk.Button(bottom_frame, text="Logout", font=("Helvetica", 14), bg="red", fg="white",
-                                  command=self.logout)
-        logout_button.pack(side="left", padx=10, pady=5)
-
-    # -------------------------------
-    # Logout Method
-    # -------------------------------
-    def logout(self):
-        """Handles logout and returns to the login page."""
-        confirm = messagebox.askyesno("Logout", "Are you sure you want to logout?")
-        if confirm:
-            self.controller.show_frame("LoginPage")
-
-    # -------------------------------
-    # Employee History Methods
-    # -------------------------------
-    def update_history_display(self):
-        """Updates the employee history table with data for the current date."""
-        # Clear the table
-        for row in self.history_tree.get_children():
-            self.history_tree.delete(row)
-
-        # Placeholder data (replace with actual data from your database)
-        placeholder_data = [
-            ("Alice", "09:00 AM", "05:00 PM", "8.0"),
-            ("Bob", "10:00 AM", "06:00 PM", "8.0"),
-            ("Charlie", "08:30 AM", "04:30 PM", "8.0"),
-        ]
-
-        if placeholder_data:
-            # Insert data into the table
-            for data in placeholder_data:
-                self.history_tree.insert("", "end", values=data)
-            self.history_placeholder.config(text="")
-        else:
-            # Show a message if no records are found
-            self.history_placeholder.config(text=f"No clock-in records for {self.current_date.strftime('%Y-%m-%d')}.")
-
-    def previous_day(self):
-        """Navigates to the previous day."""
-        self.current_date -= timedelta(days=1)
-        self.date_label.config(text=self.current_date.strftime("%Y-%m-%d"))
-        self.update_history_display()
-
-    def next_day(self):
-        """Navigates to the next day."""
-        self.current_date += timedelta(days=1)
-        self.date_label.config(text=self.current_date.strftime("%Y-%m-%d"))
-        self.update_history_display()
-
-    def set_date_from_entry(self):
-        """Sets the date based on user input."""
-        try:
-            new_date = datetime.strptime(self.date_entry.get(), "%Y-%m-%d").date()
-            self.current_date = new_date
-            self.date_label.config(text=self.current_date.strftime("%Y-%m-%d"))
-            self.update_history_display()
-        except ValueError:
-            messagebox.showerror("Invalid Date", "Please enter a valid date in YYYY-MM-DD format.")
-
-    # -------------------------------
-    # Expenses History Methods
-    # -------------------------------
-    def update_expenses_history_display(self):
-        """Updates the expenses history table with data for the current week."""
-        # Clear the table
-        for row in self.expenses_tree.get_children():
-            self.expenses_tree.delete(row)
-
-        # Placeholder data (replace with actual data from your database)
-        placeholder_data = [
-            ("2023-10-02", "Supplies", "$100"),
-            ("2023-10-03", "Utilities", "$200"),
-            ("2023-10-04", "Maintenance", "$150"),
-        ]
-
-        if placeholder_data:
-            # Insert data into the table
-            for data in placeholder_data:
-                self.expenses_tree.insert("", "end", values=data)
-            self.expenses_placeholder.config(text="")
-        else:
-            # Show a message if no records are found
-            week_end = self.current_week_start + timedelta(days=6)
-            self.expenses_placeholder.config(
-                text=f"No expenses recorded for the week of {self.current_week_start.strftime('%Y-%m-%d')} to {week_end.strftime('%Y-%m-%d')}.")
-
-    def previous_week(self):
-        """Navigates to the previous week."""
-        self.current_week_start -= timedelta(weeks=1)
-        self.update_expenses_history_display()
-
-    def next_week(self):
-        """Navigates to the next week."""
-        self.current_week_start += timedelta(weeks=1)
-        self.update_expenses_history_display()
-
-    def set_week_from_entry(self):
-        """Sets the week based on user input."""
-        try:
-            new_date = datetime.strptime(self.week_entry.get(), "%Y-%m-%d").date()
-            self.current_week_start = new_date - timedelta(days=new_date.weekday())
-            self.update_expenses_history_display()
-        except ValueError:
-            messagebox.showerror("Invalid Date", "Please enter a valid date in YYYY-MM-DD format.")
-
-    # -------------------------------
-    # Merchandise History Methods
-    # -------------------------------
-    def update_merch_history_display(self):
-        """Updates the merchandise history table with data for the current week."""
-        # Clear the table
-        for row in self.merch_tree.get_children():
-            self.merch_tree.delete(row)
-
-        # Placeholder data (replace with actual data from your database)
-        placeholder_data = [
-            ("2023-10-02", "Electronics", "$500"),
-            ("2023-10-03", "Clothing", "$300"),
-            ("2023-10-04", "Furniture", "$700"),
-        ]
-
-        if placeholder_data:
-            # Insert data into the table
-            for data in placeholder_data:
-                self.merch_tree.insert("", "end", values=data)
-            self.merch_placeholder.config(text="")
-        else:
-            # Show a message if no records are found
-            merch_week_end = self.current_merch_week_start + timedelta(days=6)
-            self.merch_placeholder.config(
-                text=f"No merchandise recorded for the week of {self.current_merch_week_start.strftime('%Y-%m-%d')} to {merch_week_end.strftime('%Y-%m-%d')}.")
-
-    def previous_merch_week(self):
-        """Navigates to the previous merchandise week."""
-        self.current_merch_week_start -= timedelta(weeks=1)
-        self.update_merch_history_display()
-
-    def next_merch_week(self):
-        """Navigates to the next merchandise week."""
-        self.current_merch_week_start += timedelta(weeks=1)
-        self.update_merch_history_display()
-
-    def set_merch_week_from_entry(self):
-        """Sets the merchandise week based on user input."""
-        try:
-            new_date = datetime.strptime(self.merch_week_entry.get(), "%Y-%m-%d").date()
-            self.current_merch_week_start = new_date - timedelta(days=new_date.weekday())
-            self.update_merch_history_display()
-        except ValueError:
-            messagebox.showerror("Invalid Date", "Please enter a valid date in YYYY-MM-DD format.")
-
-    # -------------------------------
-    # Gross Profit Methods
-    # -------------------------------
-    def update_gross_profit_display(self):
-        """Updates the gross profit table with data for the current week."""
-        # Clear the table
-        for row in self.gross_profit_tree.get_children():
-            self.gross_profit_tree.delete(row)
-
-        # Placeholder data (replace with actual data from your database)
-        placeholder_data = [
-            ("2023-10-02", "$1000", "$500", "$1500"),
-            ("2023-10-03", "$1200", "$600", "$1800"),
-            ("2023-10-04", "$900", "$400", "$1300"),
-        ]
-
-        if placeholder_data:
-            # Insert data into the table
-            for data in placeholder_data:
-                self.gross_profit_tree.insert("", "end", values=data)
-        else:
-            # Show a message if no records are found
-            profit_week_end = self.current_profit_week_start + timedelta(days=6)
-            self.profit_week_label.config(text=f"{self.current_profit_week_start.strftime('%Y-%m-%d')} to {profit_week_end.strftime('%Y-%m-%d')}")
-
-    def previous_profit_week(self):
-        """Navigates to the previous profit week."""
-        self.current_profit_week_start -= timedelta(weeks=1)
-        self.update_gross_profit_display()
-
-    def next_profit_week(self):
-        """Navigates to the next profit week."""
-        self.current_profit_week_start += timedelta(weeks=1)
-        self.update_gross_profit_display()
-
-    def set_profit_week_from_entry(self):
-        """Sets the profit week based on user input."""
-        try:
-            new_date = datetime.strptime(self.profit_week_entry.get(), "%Y-%m-%d").date()
-            self.current_profit_week_start = new_date - timedelta(days=new_date.weekday())
-            self.update_gross_profit_display()
-        except ValueError:
-            messagebox.showerror("Invalid Date", "Please enter a valid date in YYYY-MM-DD format.")
-
-    # -------------------------------
-    # Payroll Methods
-    # -------------------------------
-    def get_most_recent_sunday(self, d):
-        """Returns the most recent Sunday for a given date."""
-        days_since_sunday = (d.weekday() + 1) % 7
-        return d - timedelta(days=days_since_sunday)
+        self.configure(bg="white")
 
-    def update_payroll_display(self):
-        """Updates the payroll table with data for the current payroll week."""
-        # Clear the table
-        for row in self.payroll_tree.get_children():
-            self.payroll_tree.delete(row)
-
-        # Placeholder data (replace with actual data from your database)
-        placeholder_data = [
-            ("2023-10-01", "$1200"),
-            ("2023-09-24", "$1100"),
-            ("2023-09-17", "$1000"),
-            ("2023-09-10", "$950"),
-        ]
-
-        if placeholder_data:
-            # Insert data into the table
-            for data in placeholder_data:
-                self.payroll_tree.insert("", "end", values=data)
-        else:
-            # Show a message if no records are found
-            self.payroll_date_label.config(text=self.current_payroll_sunday.strftime("%Y-%m-%d"))
-
-    def previous_payroll_week(self):
-        """Navigates to the previous payroll week."""
-        self.current_payroll_sunday -= timedelta(weeks=1)
-        self.payroll_date_label.config(text=self.current_payroll_sunday.strftime("%Y-%m-%d"))
-        self.update_payroll_display()
-
-    def next_payroll_week(self):
-        """Navigates to the next payroll week."""
-        self.current_payroll_sunday += timedelta(weeks=1)
-        self.payroll_date_label.config(text=self.current_payroll_sunday.strftime("%Y-%m-%d"))
-        self.update_payroll_display()
-
-    def set_payroll_date_from_entry(self):
-        """Sets the payroll date based on user input."""
-        try:
-            new_date = datetime.strptime(self.payroll_date_entry.get(), "%Y-%m-%d").date()
-            self.current_payroll_sunday = self.get_most_recent_sunday(new_date)
-            self.payroll_date_label.config(text=self.current_payroll_sunday.strftime("%Y-%m-%d"))
-            self.update_payroll_display()
-        except ValueError:
-            messagebox.showerror("Invalid Date", "Please enter a valid date in YYYY-MM-DD format.")
-
-
-# For testing purposes, run this file directly.
-if __name__ == '__main__':
-    root = tk.Tk()
-    root.title("EMS Application - Manage Employees")
-    root.geometry("900x750")
-    app = ManageEmployees(root, None)
-    app.pack(fill="both", expand=True)
-    root.mainloop()
\ No newline at end of file
+        self.manage_employees = ManageEmployees(self, controller)
+        self.manage_employees.pack(expand=True, fill="both")
\ No newline at end of file
Index: .idea/dataSources.local.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"dataSourceStorageLocal\" created-in=\"PY-243.23654.177\">\r\n    <data-source name=\"@localhost\" uuid=\"74882030-66c3-4690-b336-cbfd28b6d9ab\">\r\n      <database-info product=\"MySQL\" version=\"8.0.41\" jdbc-version=\"4.2\" driver-name=\"MySQL Connector/J\" driver-version=\"mysql-connector-j-8.2.0 (Revision: 06a1f724497fd81c6a659131fda822c9e5085b6c)\" dbms=\"MYSQL\" exact-version=\"8.0.41\" exact-driver-version=\"8.2\">\r\n        <extra-name-characters>#@</extra-name-characters>\r\n        <identifier-quote-string>`</identifier-quote-string>\r\n        <jdbc-catalog-is-schema>true</jdbc-catalog-is-schema>\r\n      </database-info>\r\n      <case-sensitivity plain-identifiers=\"lower\" quoted-identifiers=\"lower\" />\r\n      <secret-storage>master_key</secret-storage>\r\n      <user-name>root</user-name>\r\n      <schema-mapping>\r\n        <introspection-scope>\r\n          <node kind=\"schema\" qname=\"employee_db\" />\r\n        </introspection-scope>\r\n      </schema-mapping>\r\n    </data-source>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources.local.xml b/.idea/dataSources.local.xml
--- a/.idea/dataSources.local.xml	(revision 0d63fd4cf7412ed2a613965f9b2c8d3acb2dc17b)
+++ b/.idea/dataSources.local.xml	(date 1742748735964)
@@ -5,7 +5,6 @@
       <database-info product="MySQL" version="8.0.41" jdbc-version="4.2" driver-name="MySQL Connector/J" driver-version="mysql-connector-j-8.2.0 (Revision: 06a1f724497fd81c6a659131fda822c9e5085b6c)" dbms="MYSQL" exact-version="8.0.41" exact-driver-version="8.2">
         <extra-name-characters>#@</extra-name-characters>
         <identifier-quote-string>`</identifier-quote-string>
-        <jdbc-catalog-is-schema>true</jdbc-catalog-is-schema>
       </database-info>
       <case-sensitivity plain-identifiers="lower" quoted-identifiers="lower" />
       <secret-storage>master_key</secret-storage>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"1273df12-f704-48bc-b0d1-73903eeefc88\" name=\"Changes\" comment=\"Fixed the login\">\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/shelf/Changes6.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/shelf/Changes6/shelved.patch\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/shelf/Changes7.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/shelf/Changes7/shelved.patch\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/shelf/Fixed_the_login.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/shelf/Fixed_the_login/shelved.patch\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/dataSources/74882030-66c3-4690-b336-cbfd28b6d9ab.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/dataSources/74882030-66c3-4690-b336-cbfd28b6d9ab.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/database.sql\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/database.sql\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/empPage.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/empPage.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/login.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/login.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n        <option value=\"SQL File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;DanielJaffeProjects&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/DanielJaffeProjects/Employee-application.git&quot;,\r\n    &quot;accountId&quot;: &quot;91c662e2-bbe2-4e9c-8c90-a67d3f4145ee&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2tsSfy8edG6w5uyQjivXBQHiNuX\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Database Script.sql database.sql.executor\": \"Run\",\r\n    \"Python.empPage.executor\": \"Run\",\r\n    \"Python.ems.executor\": \"Run\",\r\n    \"Python.login.executor\": \"Run\",\r\n    \"Python.manageEmployees.executor\": \"Run\",\r\n    \"Python.managerPage.executor\": \"Run\",\r\n    \"Python.ownerPage.executor\": \"Run\",\r\n    \"Python.sql connector.executor\": \"Run\",\r\n    \"Python.sqlConnector.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"git-widget-placeholder\": \"Rebasing main\",\r\n    \"last_opened_file_path\": \"C:/Users/drjed/OneDrive/Documents/GitHub/Employee-application\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  },\r\n  \"keyToStringList\": {\r\n    \"DatabaseDriversLRU\": [\r\n      \"mysql\"\r\n    ],\r\n    \"RunConfigurationTargetLRU\": [\r\n      \"aa110dd0-22cf-41cb-b463-22a0748a2ec6\",\r\n      \"8e9e8047-58f1-4ba5-9b36-912ac72beeaf\"\r\n    ]\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"empPage\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Employee-application\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/empPage.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.empPage\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-822845ee3bb5-JavaScript-PY-243.23654.177\" />\r\n        <option value=\"bundled-python-sdk-91d3a02ef49d-43b77aa2d136-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-243.23654.177\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"1273df12-f704-48bc-b0d1-73903eeefc88\" name=\"Changes\" comment=\"\" />\r\n      <created>1741139395654</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1741139395654</updated>\r\n      <workItem from=\"1741139396833\" duration=\"39000\" />\r\n      <workItem from=\"1741188109676\" duration=\"2860000\" />\r\n      <workItem from=\"1741193751555\" duration=\"530000\" />\r\n      <workItem from=\"1741195127453\" duration=\"5681000\" />\r\n      <workItem from=\"1741208821762\" duration=\"2208000\" />\r\n      <workItem from=\"1741353788940\" duration=\"991000\" />\r\n      <workItem from=\"1741449184501\" duration=\"269000\" />\r\n      <workItem from=\"1741458480908\" duration=\"3765000\" />\r\n      <workItem from=\"1741972901937\" duration=\"2838000\" />\r\n      <workItem from=\"1741981767234\" duration=\"606000\" />\r\n      <workItem from=\"1741982650551\" duration=\"6510000\" />\r\n      <workItem from=\"1741992592117\" duration=\"1371000\" />\r\n      <workItem from=\"1742221655448\" duration=\"4218000\" />\r\n      <workItem from=\"1742248464725\" duration=\"6153000\" />\r\n      <workItem from=\"1742565807545\" duration=\"5387000\" />\r\n      <workItem from=\"1742689303343\" duration=\"4782000\" />\r\n      <workItem from=\"1742733181633\" duration=\"1339000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Added title to login page as well as ad justified the width of the username and password box. Change employee so it has regular in balance and out balance and removed unnecessary things.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741197688889</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741197688889</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"added history so that you can see the prior in balance and out balances as well and when clock in and out\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741199595129</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741199595129</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"added a header to employee and reformated the ones for manager and owner\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741202026556</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741202026556</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Change history to add store number, date, clock in and out, reg in and out, duration.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741991738845</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741991738845</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Change history to add store number, date, clock in and out, reg in and out, duration.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741991749405</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741991749405</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"change it to start in full screen mode\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741991942257</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741991942257</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"add the ability to add employees with name, username, password, and role\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1742233655446</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1742233655446</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"change the database for both employee closing and the employee information\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1742235534622</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1742235534622</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Fixed the login\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1742569410321</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1742569410321</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"10\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Added title to login page as well as ad justified the width of the username and password box. Change employee so it has regular in balance and out balance and removed unnecessary things.\" />\r\n    <MESSAGE value=\"added history so that you can see the prior in balance and out balances as well and when clock in and out\" />\r\n    <MESSAGE value=\"added a header to employee and reformated the ones for manager and owner\" />\r\n    <MESSAGE value=\"Change history to add store number, date, clock in and out, reg in and out, duration.\" />\r\n    <MESSAGE value=\"change it to start in full screen mode\" />\r\n    <MESSAGE value=\"add the ability to add employees with name, username, password, and role\" />\r\n    <MESSAGE value=\"change the database for both employee closing and the employee information\" />\r\n    <MESSAGE value=\"Fixed the login\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Fixed the login\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/Employee_application$ems.coverage\" NAME=\"ems Coverage Results\" MODIFIED=\"1742733994160\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Employee_application$ownerPage.coverage\" NAME=\"ownerPage Coverage Results\" MODIFIED=\"1741460856220\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Employee_application$Signup.coverage\" NAME=\"Signup Coverage Results\" MODIFIED=\"1742229539230\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Employee_application$sqlConnector.coverage\" NAME=\"sqlConnector Coverage Results\" MODIFIED=\"1742260312660\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Employee_application$managerPage.coverage\" NAME=\"managerPage Coverage Results\" MODIFIED=\"1741464753332\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Employee_application$sql_connector.coverage\" NAME=\"sql connector Coverage Results\" MODIFIED=\"1742223421969\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Employee_application$login.coverage\" NAME=\"login Coverage Results\" MODIFIED=\"1742569079667\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Employee_application$empPage.coverage\" NAME=\"empPage Coverage Results\" MODIFIED=\"1742734522961\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Employee_application$manageEmployees.coverage\" NAME=\"manageEmployees Coverage Results\" MODIFIED=\"1742733698846\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 0d63fd4cf7412ed2a613965f9b2c8d3acb2dc17b)
+++ b/.idea/workspace.xml	(date 1742868829258)
@@ -5,17 +5,10 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="1273df12-f704-48bc-b0d1-73903eeefc88" name="Changes" comment="Fixed the login">
-      <change afterPath="$PROJECT_DIR$/.idea/shelf/Changes6.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/shelf/Changes6/shelved.patch" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/shelf/Changes7.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/shelf/Changes7/shelved.patch" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/shelf/Fixed_the_login.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/shelf/Fixed_the_login/shelved.patch" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/dataSources/74882030-66c3-4690-b336-cbfd28b6d9ab.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources/74882030-66c3-4690-b336-cbfd28b6d9ab.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/dataSources.local.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.local.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/database.sql" beforeDir="false" afterPath="$PROJECT_DIR$/database.sql" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/empPage.py" beforeDir="false" afterPath="$PROJECT_DIR$/empPage.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/login.py" beforeDir="false" afterPath="$PROJECT_DIR$/login.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/manageEmployees.py" beforeDir="false" afterPath="$PROJECT_DIR$/manageEmployees.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/managerPage.py" beforeDir="false" afterPath="$PROJECT_DIR$/managerPage.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -53,39 +46,39 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Database Script.sql database.sql.executor": "Run",
-    "Python.empPage.executor": "Run",
-    "Python.ems.executor": "Run",
-    "Python.login.executor": "Run",
-    "Python.manageEmployees.executor": "Run",
-    "Python.managerPage.executor": "Run",
-    "Python.ownerPage.executor": "Run",
-    "Python.sql connector.executor": "Run",
-    "Python.sqlConnector.executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "RunOnceActivity.git.unshallow": "true",
-    "git-widget-placeholder": "Rebasing main",
-    "last_opened_file_path": "C:/Users/drjed/OneDrive/Documents/GitHub/Employee-application",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Database Script.sql database.sql.executor&quot;: &quot;Run&quot;,
+    &quot;Python.empPage.executor&quot;: &quot;Run&quot;,
+    &quot;Python.ems.executor&quot;: &quot;Run&quot;,
+    &quot;Python.login.executor&quot;: &quot;Run&quot;,
+    &quot;Python.manageEmployees.executor&quot;: &quot;Run&quot;,
+    &quot;Python.managerPage.executor&quot;: &quot;Run&quot;,
+    &quot;Python.ownerPage.executor&quot;: &quot;Run&quot;,
+    &quot;Python.sql connector.executor&quot;: &quot;Run&quot;,
+    &quot;Python.sqlConnector.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/drjed/OneDrive/Documents/GitHub/Employee-application&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   },
-  "keyToStringList": {
-    "DatabaseDriversLRU": [
-      "mysql"
+  &quot;keyToStringList&quot;: {
+    &quot;DatabaseDriversLRU&quot;: [
+      &quot;mysql&quot;
     ],
-    "RunConfigurationTargetLRU": [
-      "aa110dd0-22cf-41cb-b463-22a0748a2ec6",
-      "8e9e8047-58f1-4ba5-9b36-912ac72beeaf"
+    &quot;RunConfigurationTargetLRU&quot;: [
+      &quot;aa110dd0-22cf-41cb-b463-22a0748a2ec6&quot;,
+      &quot;8e9e8047-58f1-4ba5-9b36-912ac72beeaf&quot;
     ]
   }
-}]]></component>
+}</component>
   <component name="RunManager">
     <configuration name="empPage" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="Employee-application" />
@@ -149,6 +142,10 @@
       <workItem from="1742565807545" duration="5387000" />
       <workItem from="1742689303343" duration="4782000" />
       <workItem from="1742733181633" duration="1339000" />
+      <workItem from="1742735651531" duration="1511000" />
+      <workItem from="1742816061390" duration="898000" />
+      <workItem from="1742846139666" duration="2943000" />
+      <workItem from="1742866825412" duration="1544000" />
     </task>
     <task id="LOCAL-00001" summary="Added title to login page as well as ad justified the width of the username and password box. Change employee so it has regular in balance and out balance and removed unnecessary things.">
       <option name="closed" value="true" />
@@ -250,15 +247,26 @@
     <MESSAGE value="Fixed the login" />
     <option name="LAST_COMMIT_MESSAGE" value="Fixed the login" />
   </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/ems.py</url>
+          <line>24</line>
+          <option name="timeStamp" value="1" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
+  </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/Employee_application$ems.coverage" NAME="ems Coverage Results" MODIFIED="1742733994160" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Employee_application$ownerPage.coverage" NAME="ownerPage Coverage Results" MODIFIED="1741460856220" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Employee_application$ems.coverage" NAME="ems Coverage Results" MODIFIED="1742868110857" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Employee_application$ownerPage.coverage" NAME="ownerPage Coverage Results" MODIFIED="1742847677570" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Employee_application$Signup.coverage" NAME="Signup Coverage Results" MODIFIED="1742229539230" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Employee_application$sqlConnector.coverage" NAME="sqlConnector Coverage Results" MODIFIED="1742260312660" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Employee_application$managerPage.coverage" NAME="managerPage Coverage Results" MODIFIED="1741464753332" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Employee_application$managerPage.coverage" NAME="managerPage Coverage Results" MODIFIED="1742868099477" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Employee_application$sql_connector.coverage" NAME="sql connector Coverage Results" MODIFIED="1742223421969" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Employee_application$login.coverage" NAME="login Coverage Results" MODIFIED="1742569079667" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Employee_application$empPage.coverage" NAME="empPage Coverage Results" MODIFIED="1742734522961" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Employee_application$manageEmployees.coverage" NAME="manageEmployees Coverage Results" MODIFIED="1742733698846" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Employee_application$empPage.coverage" NAME="empPage Coverage Results" MODIFIED="1742866879280" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Employee_application$manageEmployees.coverage" NAME="manageEmployees Coverage Results" MODIFIED="1742866886840" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
Index: manageEmployees.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom tkinter import messagebox, ttk\r\nfrom datetime import datetime, timedelta\r\nimport sqlConnector\r\n\r\n\r\nclass ManageEmployees(tk.Frame):\r\n    def __init__(self, parent, controller):\r\n        super().__init__(parent)\r\n        self.controller = controller\r\n        self.configure(bg=\"white\")\r\n\r\n        # Initialize weekly start dates for Expenses, Merchandise, Gross Profit History (set to Monday)\r\n        self.current_week_start = datetime.now().date() - timedelta(days=datetime.now().date().weekday())\r\n        self.current_merch_week_start = datetime.now().date() - timedelta(days=datetime.now().date().weekday())\r\n        self.current_profit_week_start = datetime.now().date() - timedelta(days=datetime.now().date().weekday())\r\n        # For Payroll, initialize with the most recent Sunday\r\n        self.current_payroll_sunday = self.get_most_recent_sunday(datetime.now().date())\r\n        # For Employee History, initialize current date (daily)\r\n        self.current_date = datetime.now().date()\r\n        self.create_bottom_frame()\r\n        # Top frame for store selection dropdown\r\n        top_frame = tk.Frame(self, bg=\"white\", bd=1, relief=\"solid\")\r\n        top_frame.pack(side=\"top\", fill=\"x\", padx=10, pady=10)\r\n\r\n        # Centered label (ALOHA)\r\n        aloha_label = tk.Label(top_frame, text=\"ALOHA\", font=(\"Helvetica\", 14), bg=\"white\", fg=\"black\")\r\n        aloha_label.place(relx=0.5, rely=0.5, anchor=\"center\")\r\n\r\n        # Right label (name of employee)\r\n        tk.Label(top_frame, text=\"Name of employee\", font=(\"Helvetica\", 14), bg=\"white\", fg=\"black\").pack(side=\"right\",\r\n                                                                                                          padx=(5, 10))\r\n\r\n        selected_store = tk.StringVar()\r\n        selected_store.set(\"Store 1\")\r\n        store_options = [\"Store 1\", \"Store 2\", \"Store 3\", \"Store 4\"]\r\n        store_dropdown = tk.OptionMenu(top_frame, selected_store, *store_options)\r\n        store_dropdown.config(font=(\"Helvetica\", 14), bg=\"white\", fg=\"black\", relief=\"solid\", bd=2)\r\n        store_dropdown.pack(side=\"left\", padx=10, pady=5)\r\n\r\n        # Create Main Layout\r\n        main_frame = tk.Frame(self, bg=\"white\")\r\n        main_frame.pack(fill=\"both\", expand=True)\r\n\r\n        # Left Panel for Tabs\r\n        tab_frame = tk.Frame(main_frame, bg=\"white\", width=250, bd=1, relief=\"solid\")\r\n        tab_frame.pack(side=\"left\", fill=\"y\", padx=10, pady=10)\r\n        \r\n        # Right Panel for Content\r\n        content_frame = tk.Frame(main_frame, bg=\"white\", bd=1, relief=\"solid\")\r\n        content_frame.pack(side=\"right\", fill=\"both\", expand=True, padx=10, pady=10)\r\n        content_frame.grid_rowconfigure(0, weight=1)\r\n        content_frame.grid_columnconfigure(0, weight=1)\r\n\r\n        # Dictionary to hold the tabs\r\n        tabs = {}\r\n\r\n        # -------------------------------\r\n        # Enter Invoice Tab (as provided)\r\n        # -------------------------------\r\n        enter_invoice_frame = tk.Frame(content_frame, bg=\"white\")\r\n        enter_invoice_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tk.Label(enter_invoice_frame, text=\"Enter Invoice\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n        \r\n        tk.Label(enter_invoice_frame, text=\"Invoice ID:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        invoice_id = tk.Entry(enter_invoice_frame, font=(\"Helvetica\", 14))\r\n        invoice_id.pack()\r\n        \r\n        tk.Label(enter_invoice_frame, text=\"Date:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        invoice_date = tk.Entry(enter_invoice_frame, font=(\"Helvetica\", 14))\r\n        invoice_date.pack()\r\n        \r\n        tk.Label(enter_invoice_frame, text=\"Company:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        invoice_company = tk.Entry(enter_invoice_frame, font=(\"Helvetica\", 14))\r\n        invoice_company.pack()\r\n        \r\n        tk.Label(enter_invoice_frame, text=\"Paid (Yes/No):\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        invoice_paid = tk.Entry(enter_invoice_frame, font=(\"Helvetica\", 14))\r\n        invoice_paid.pack()\r\n        \r\n        tk.Label(enter_invoice_frame, text=\"Amount:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        invoice_amount = tk.Entry(enter_invoice_frame, font=(\"Helvetica\", 14))\r\n        invoice_amount.pack()\r\n        \r\n        tk.Label(enter_invoice_frame, text=\"Amount Paid:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        amount_paid = tk.Entry(enter_invoice_frame, font=(\"Helvetica\", 14))\r\n        amount_paid.pack()\r\n        \r\n        tk.Button(enter_invoice_frame, text=\"Submit Invoice\", font=(\"Helvetica\", 14), \r\n                  command=lambda: self.submit_invoice(invoice_id.get(), invoice_date.get(), invoice_company.get(), \r\n                                                      invoice_paid.get(), invoice_amount.get(), amount_paid.get())).pack(pady=10)\r\n        \r\n        tabs[\"Enter Invoice\"] = enter_invoice_frame\r\n\r\n        # -------------------------------\r\n        # Enter Expense Tab\r\n        # -------------------------------\r\n        enter_expense_frame = tk.Frame(content_frame, bg=\"white\")\r\n        enter_expense_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tk.Label(enter_expense_frame, text=\"Enter Expense\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n        \r\n        tk.Label(enter_expense_frame, text=\"Expense Type:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        expense_type = tk.Entry(enter_expense_frame, font=(\"Helvetica\", 14))\r\n        expense_type.pack()\r\n        \r\n        tk.Label(enter_expense_frame, text=\"Expense Value:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        expense_value = tk.Entry(enter_expense_frame, font=(\"Helvetica\", 14))\r\n        expense_value.pack()\r\n        \r\n        tk.Label(enter_expense_frame, text=\"Expense Date:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        expense_date = tk.Entry(enter_expense_frame, font=(\"Helvetica\", 14))\r\n        expense_date.pack()\r\n        \r\n        tk.Button(enter_expense_frame, text=\"Submit Expense\", font=(\"Helvetica\", 14),\r\n                  command=lambda: self.submit_expense(expense_type.get(), expense_value.get(), expense_date.get())).pack(pady=10)\r\n        \r\n        tabs[\"Enter Expense\"] = enter_expense_frame\r\n\r\n        # -------------------------------\r\n        # Enter Merchandise Tab\r\n        # -------------------------------\r\n        enter_merch_frame = tk.Frame(content_frame, bg=\"white\")\r\n        enter_merch_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tk.Label(enter_merch_frame, text=\"Enter Merchandise\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n        \r\n        tk.Label(enter_merch_frame, text=\"Merchandise Type:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        merch_type = tk.Entry(enter_merch_frame, font=(\"Helvetica\", 14))\r\n        merch_type.pack()\r\n        \r\n        tk.Label(enter_merch_frame, text=\"Merchandise Value:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        merch_value = tk.Entry(enter_merch_frame, font=(\"Helvetica\", 14))\r\n        merch_value.pack()\r\n        \r\n        tk.Label(enter_merch_frame, text=\"Merchandise Date:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        merch_date = tk.Entry(enter_merch_frame, font=(\"Helvetica\", 14))\r\n        merch_date.pack()\r\n        \r\n        tk.Button(enter_merch_frame, text=\"Submit Merchandise\", font=(\"Helvetica\", 14),\r\n                  command=lambda: self.submit_merchandise(merch_type.get(), merch_value.get(), merch_date.get())).pack(pady=10)\r\n        \r\n        tabs[\"Enter Merchandise\"] = enter_merch_frame\r\n\r\n        # -------------------------------\r\n        # Employee History Tab (Daily)\r\n        # -------------------------------\r\n        employee_history_frame = tk.Frame(content_frame, bg=\"white\")\r\n        employee_history_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tabs[\"Employee History\"] = employee_history_frame\r\n\r\n        tk.Label(employee_history_frame, text=\"Employee History\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        nav_frame = tk.Frame(employee_history_frame, bg=\"white\")\r\n        nav_frame.pack(pady=10)\r\n        prev_button = tk.Button(nav_frame, text=\"<\", font=(\"Helvetica\", 14), command=self.previous_day)\r\n        prev_button.pack(side=\"left\", padx=5)\r\n        self.date_label = tk.Label(nav_frame, text=self.current_date.strftime(\"%Y-%m-%d\"), font=(\"Helvetica\", 14), bg=\"white\")\r\n        self.date_label.pack(side=\"left\", padx=5)\r\n        next_button = tk.Button(nav_frame, text=\">\", font=(\"Helvetica\", 14), command=self.next_day)\r\n        next_button.pack(side=\"left\", padx=5)\r\n\r\n        tk.Label(employee_history_frame, text=\"Enter Date (YYYY-MM-DD):\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(20,5))\r\n        self.date_entry = tk.Entry(employee_history_frame, font=(\"Helvetica\", 14))\r\n        self.date_entry.pack(pady=5)\r\n        tk.Button(employee_history_frame, text=\"Go\", font=(\"Helvetica\", 14), command=self.set_date_from_entry).pack(pady=5)\r\n\r\n        self.history_placeholder = tk.Label(employee_history_frame, text=\"\", font=(\"Helvetica\", 12), bg=\"white\")\r\n        self.history_placeholder.pack(pady=20)\r\n        self.update_history_display()\r\n\r\n        # -------------------------------\r\n        # Expenses History Tab (Weekly)\r\n        # -------------------------------\r\n        expenses_history_frame = tk.Frame(content_frame, bg=\"white\")\r\n        expenses_history_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tabs[\"Expenses History\"] = expenses_history_frame\r\n\r\n        tk.Label(expenses_history_frame, text=\"Expenses History\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        exp_nav_frame = tk.Frame(expenses_history_frame, bg=\"white\")\r\n        exp_nav_frame.pack(pady=10)\r\n        prev_week_btn = tk.Button(exp_nav_frame, text=\"<\", font=(\"Helvetica\", 14), command=self.previous_week)\r\n        prev_week_btn.pack(side=\"left\", padx=5)\r\n        self.week_label = tk.Label(exp_nav_frame, text=\"\", font=(\"Helvetica\", 14), bg=\"white\")\r\n        self.week_label.pack(side=\"left\", padx=5)\r\n        next_week_btn = tk.Button(exp_nav_frame, text=\">\", font=(\"Helvetica\", 14), command=self.next_week)\r\n        next_week_btn.pack(side=\"left\", padx=5)\r\n\r\n        tk.Label(expenses_history_frame, text=\"Enter Date (YYYY-MM-DD):\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(20,5))\r\n        self.week_entry = tk.Entry(expenses_history_frame, font=(\"Helvetica\", 14))\r\n        self.week_entry.pack(pady=5)\r\n        tk.Button(expenses_history_frame, text=\"Go\", font=(\"Helvetica\", 14), command=self.set_week_from_entry).pack(pady=5)\r\n\r\n        self.expenses_history_placeholder = tk.Label(expenses_history_frame, text=\"\", font=(\"Helvetica\", 12), bg=\"white\")\r\n        self.expenses_history_placeholder.pack(pady=20)\r\n        self.update_expenses_history_display()\r\n\r\n        # -------------------------------\r\n        # Merchandise History Tab (Weekly)\r\n        # -------------------------------\r\n        merch_history_frame = tk.Frame(content_frame, bg=\"white\")\r\n        merch_history_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tabs[\"Merchandise History\"] = merch_history_frame\r\n\r\n        tk.Label(merch_history_frame, text=\"Merchandise History\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        merch_nav_frame = tk.Frame(merch_history_frame, bg=\"white\")\r\n        merch_nav_frame.pack(pady=10)\r\n        prev_merch_btn = tk.Button(merch_nav_frame, text=\"<\", font=(\"Helvetica\", 14), command=self.previous_merch_week)\r\n        prev_merch_btn.pack(side=\"left\", padx=5)\r\n        self.merch_week_label = tk.Label(merch_nav_frame, text=\"\", font=(\"Helvetica\", 14), bg=\"white\")\r\n        self.merch_week_label.pack(side=\"left\", padx=5)\r\n        next_merch_btn = tk.Button(merch_nav_frame, text=\">\", font=(\"Helvetica\", 14), command=self.next_merch_week)\r\n        next_merch_btn.pack(side=\"left\", padx=5)\r\n\r\n        tk.Label(merch_history_frame, text=\"Enter Date (YYYY-MM-DD):\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(20,5))\r\n        self.merch_week_entry = tk.Entry(merch_history_frame, font=(\"Helvetica\", 14))\r\n        self.merch_week_entry.pack(pady=5)\r\n        tk.Button(merch_history_frame, text=\"Go\", font=(\"Helvetica\", 14), command=self.set_merch_week_from_entry).pack(pady=5)\r\n\r\n        self.merch_history_placeholder = tk.Label(merch_history_frame, text=\"\", font=(\"Helvetica\", 12), bg=\"white\")\r\n        self.merch_history_placeholder.pack(pady=20)\r\n        self.update_merch_history_display()\r\n\r\n        # -------------------------------\r\n        # Gross Profit Tab (Weekly)\r\n        # -------------------------------\r\n        gross_profit_frame = tk.Frame(content_frame, bg=\"white\")\r\n        gross_profit_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tabs[\"Gross Profit\"] = gross_profit_frame\r\n\r\n        tk.Label(gross_profit_frame, text=\"Gross Profit\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        profit_nav_frame = tk.Frame(gross_profit_frame, bg=\"white\")\r\n        profit_nav_frame.pack(pady=10)\r\n        prev_profit_btn = tk.Button(profit_nav_frame, text=\"<\", font=(\"Helvetica\", 14), command=self.previous_profit_week)\r\n        prev_profit_btn.pack(side=\"left\", padx=5)\r\n        self.profit_week_label = tk.Label(profit_nav_frame, text=\"\", font=(\"Helvetica\", 14), bg=\"white\")\r\n        self.profit_week_label.pack(side=\"left\", padx=5)\r\n        next_profit_btn = tk.Button(profit_nav_frame, text=\">\", font=(\"Helvetica\", 14), command=self.next_profit_week)\r\n        next_profit_btn.pack(side=\"left\", padx=5)\r\n\r\n        tk.Label(gross_profit_frame, text=\"Enter Date (YYYY-MM-DD):\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(20,5))\r\n        self.profit_week_entry = tk.Entry(gross_profit_frame, font=(\"Helvetica\", 14))\r\n        self.profit_week_entry.pack(pady=5)\r\n        tk.Button(gross_profit_frame, text=\"Go\", font=(\"Helvetica\", 14), command=self.set_profit_week_from_entry).pack(pady=5)\r\n\r\n        # Create a Treeview for the gross profit table\r\n        self.gross_profit_tree = ttk.Treeview(gross_profit_frame, columns=(\"Date\", \"Cash\", \"Credit\", \"Total\"), show=\"headings\")\r\n        self.gross_profit_tree.heading(\"Date\", text=\"Date\")\r\n        self.gross_profit_tree.heading(\"Cash\", text=\"Cash\")\r\n        self.gross_profit_tree.heading(\"Credit\", text=\"Credit\")\r\n        self.gross_profit_tree.heading(\"Total\", text=\"Total\")\r\n        self.gross_profit_tree.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n        self.update_gross_profit_display()\r\n\r\n        # -------------------------------\r\n        # Payroll Tab\r\n        # -------------------------------\r\n        payroll_frame = tk.Frame(content_frame, bg=\"white\")\r\n        payroll_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tabs[\"Payroll\"] = payroll_frame\r\n\r\n        tk.Label(payroll_frame, text=\"Payroll\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        # Employee selection dropdown\r\n        tk.Label(payroll_frame, text=\"Select Employee:\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(10,5))\r\n        self.payroll_employee_var = tk.StringVar()\r\n        self.payroll_employee_var.set(\"Alice\")\r\n        employees = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\r\n        payroll_dropdown = tk.OptionMenu(payroll_frame, self.payroll_employee_var, *employees)\r\n        payroll_dropdown.config(font=(\"Helvetica\", 14), bg=\"white\")\r\n        payroll_dropdown.pack(pady=5)\r\n\r\n        # Payroll navigation\r\n        payroll_nav_frame = tk.Frame(payroll_frame, bg=\"white\")\r\n        payroll_nav_frame.pack(pady=10)\r\n        payroll_prev_btn = tk.Button(payroll_nav_frame, text=\"<\", font=(\"Helvetica\", 14), command=self.previous_payroll_week)\r\n        payroll_prev_btn.pack(side=\"left\", padx=5)\r\n        self.payroll_date_label = tk.Label(payroll_nav_frame, text=self.current_payroll_sunday.strftime(\"%Y-%m-%d\"), font=(\"Helvetica\", 14), bg=\"white\")\r\n        self.payroll_date_label.pack(side=\"left\", padx=5)\r\n        payroll_next_btn = tk.Button(payroll_nav_frame, text=\">\", font=(\"Helvetica\", 14), command=self.next_payroll_week)\r\n        payroll_next_btn.pack(side=\"left\", padx=5)\r\n\r\n        tk.Label(payroll_frame, text=\"Enter Date (YYYY-MM-DD):\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(20,5))\r\n        self.payroll_date_entry = tk.Entry(payroll_frame, font=(\"Helvetica\", 14))\r\n        self.payroll_date_entry.pack(pady=5)\r\n        tk.Button(payroll_frame, text=\"Go\", font=(\"Helvetica\", 14), command=self.set_payroll_date_from_entry).pack(pady=5)\r\n\r\n        # Payroll table showing previous 4 Sundays and pay (placeholder)\r\n        self.payroll_tree = ttk.Treeview(payroll_frame, columns=(\"Date\", \"Pay\"), show=\"headings\")\r\n        self.payroll_tree.heading(\"Date\", text=\"Date\")\r\n        self.payroll_tree.heading(\"Pay\", text=\"Pay\")\r\n        self.payroll_tree.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n        self.update_payroll_display()\r\n\r\n        # -------------------------------\r\n        # Manage Employees Tab (Notebook)\r\n        # -------------------------------\r\n        manage_frame = tk.Frame(content_frame, bg=\"white\")\r\n        manage_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        notebook = ttk.Notebook(manage_frame)\r\n        notebook.pack(expand=True, fill=\"both\")\r\n        # Add Employee Tab\r\n        add_employee_frame = tk.Frame(notebook, bg=\"white\")\r\n        tk.Label(add_employee_frame, text=\"Add Employee\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n\r\n        tk.Label(add_employee_frame, text=\"First Name\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        emp_firstname = tk.Entry(add_employee_frame, font=(\"Helvetica\", 14))\r\n        emp_firstname.pack()\r\n\r\n        tk.Label(add_employee_frame, text=\"Last Name:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        emp_lastname = tk.Entry(add_employee_frame, font=(\"Helvetica\", 14))\r\n        emp_lastname.pack()\r\n        tk.Label(add_employee_frame, text=\"Username:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        emp_username = tk.Entry(add_employee_frame, font=(\"Helvetica\", 14))\r\n        emp_username.pack()\r\n        tk.Label(add_employee_frame, text=\"Password:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        emp_password = tk.Entry(add_employee_frame, font=(\"Helvetica\", 14), show=\"*\")\r\n        emp_password.pack()\r\n\r\n        # Role Dropdown Menu\r\n        tk.Label(add_employee_frame, text=\"Role:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        roles = [\"Employee\", \"Manager\",\"Owner\"]  # List of roles\r\n        selected_role = tk.StringVar()\r\n        selected_role.set(roles[0])  # Set default role\r\n        role_menu = tk.OptionMenu(add_employee_frame, selected_role, *roles)\r\n        role_menu.config(font=(\"Helvetica\", 14))\r\n        role_menu.pack()\r\n\r\n        tk.Button(add_employee_frame, text=\"Add Employee\", font=(\"Helvetica\", 14),\r\n                  command=lambda: self.add_employee(emp_firstname.get(), emp_lastname.get(), emp_username.get(), emp_password.get(),\r\n                                                 selected_role.get())).pack(pady=10)\r\n\r\n        # Delete Employee Tab\r\n        delete_employee_frame = tk.Frame(notebook, bg=\"white\")\r\n        tk.Label(delete_employee_frame, text=\"Delete Employee\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n        tk.Label(delete_employee_frame, text=\"Username:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        del_username = tk.Entry(delete_employee_frame, font=(\"Helvetica\", 14))\r\n        del_username.pack()\r\n        tk.Button(delete_employee_frame, text=\"Delete\", font=(\"Helvetica\", 14), \r\n                  command=lambda: self.delete_employee(del_username.get())).pack(pady=10)\r\n\r\n        # Edit Employee Tab\r\n        edit_employee_frame = tk.Frame(notebook, bg=\"white\")\r\n        tk.Label(edit_employee_frame, text=\"Edit Employee\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n        tk.Label(edit_employee_frame, text=\"Username:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        edit_username = tk.Entry(edit_employee_frame, font=(\"Helvetica\", 14))\r\n        edit_username.pack()\r\n        tk.Label(edit_employee_frame, text=\"New Password:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        new_password = tk.Entry(edit_employee_frame, font=(\"Helvetica\", 14), show=\"*\")\r\n        new_password.pack()\r\n        tk.Label(edit_employee_frame, text=\"Edit Bonus Percentage:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        new_bonus = tk.Entry(edit_employee_frame, font=(\"Helvetica\", 14))\r\n        new_bonus.pack()\r\n        tk.Button(edit_employee_frame, text=\"Update\", font=(\"Helvetica\", 14),\r\n                  command=lambda: self.edit_employee(edit_username.get(), new_password.get(), new_bonus.get())).pack(pady=10)\r\n\r\n        notebook.add(add_employee_frame, text=\"Add Employee\")\r\n        notebook.add(delete_employee_frame, text=\"Delete Employee\")\r\n        notebook.add(edit_employee_frame, text=\"Edit Employee\")\r\n        \r\n        tabs[\"Manage Employees\"] = manage_frame\r\n\r\n\r\n        # -------------------------------\r\n        # Function to Show Selected Tab\r\n        # -------------------------------\r\n        def show_tab(tab_name):\r\n            tabs[tab_name].tkraise()\r\n        \r\n        for title in tabs:\r\n            btn = tk.Button(tab_frame, text=title, font=(\"Helvetica\", 14), fg=\"black\", bg=\"white\",\r\n                            relief=\"solid\", bd=2, command=lambda t=title: show_tab(t), width=25, height=2)\r\n            btn.pack(pady=5, padx=10, fill=\"x\")\r\n        \r\n        # Show the default tab\r\n        show_tab(\"Enter Invoice\")\r\n    \r\n    # -------------------------------\r\n    # Placeholder Methods\r\n    # -------------------------------\r\n\r\n    def create_bottom_frame(self):\r\n        \"\"\"Creates a bottom frame for the logout button.\"\"\"\r\n        bottom_frame = tk.Frame(self, bg=\"white\", bd=1, relief=\"solid\")\r\n        bottom_frame.pack(side=\"bottom\", fill=\"x\", padx=10, pady=10)\r\n\r\n        logout_button = tk.Button(bottom_frame, text=\"Logout\", font=(\"Helvetica\", 14), bg=\"red\", fg=\"white\",\r\n                                  command=self.logout)\r\n        logout_button.pack(side=\"left\", padx=10, pady=5)\r\n\r\n    def logout(self):\r\n        \"\"\"Handles logout and returns to the login page.\"\"\"\r\n        confirm = messagebox.askyesno(\"Logout\", \"Are you sure you want to logout?\")\r\n        if confirm:\r\n            self.controller.show_frame(\"LoginPage\")\r\n    def submit_invoice(self, invoice_id, invoice_date, invoice_company, invoice_paid, invoice_amount, amount_paid):\r\n        messagebox.showinfo(\"Submit Invoice\", f\"Invoice {invoice_id} submitted!\")\r\n    \r\n    def submit_expense(self, expense_type, expense_value, expense_date):\r\n        messagebox.showinfo(\"Submit Expense\", f\"Expense '{expense_type}' submitted!\")\r\n    \r\n    def submit_merchandise(self, merch_type, merch_value, merch_date):\r\n        messagebox.showinfo(\"Submit Merchandise\", f\"Merchandise '{merch_type}' submitted!\")\r\n    \r\n    def add_employee(self, firstName, lastName, username, password, selectedRole):\r\n        if not firstName or not lastName or not password or not selectedRole:\r\n            messagebox.showerror(\"Error\", \"All fields must be filled out.\")\r\n            return\r\n        messagebox.showinfo(\"Success\", f\"Employee {firstName} {lastName} added successfully!\")\r\n        # sends info to database\r\n        query = \"\"\"INSERT INTO employee(firstName,lastName, username, password,role)\r\n           VALUES (%s, %s, %s, %s,%s)\"\"\"\r\n        data = (firstName, lastName, username,password,selectedRole)\r\n\r\n        # send data to sql connector\r\n        sqlConnector.connect(query, data)\r\n\r\n    def delete_employee(self, username):\r\n        if not username:\r\n            messagebox.showerror(\"Error\", \"Username is required.\")\r\n            return\r\n        messagebox.showinfo(\"Success\", f\"Employee {username} deleted successfully!\")\r\n    \r\n    def edit_employee(self, username, password, bonus):\r\n        if not username:\r\n            messagebox.showerror(\"Error\", \"Username is required.\")\r\n            return\r\n        messagebox.showinfo(\"Success\", f\"Employee {username} updated successfully!\")\r\n    \r\n    # -------------------------------\r\n    # Employee History (Daily) Methods\r\n    # -------------------------------\r\n    def update_history_display(self):\r\n        self.history_placeholder.config(text=f\"No clock-in records for {self.current_date.strftime('%Y-%m-%d')}.\")\r\n    \r\n    def previous_day(self):\r\n        self.current_date -= timedelta(days=1)\r\n        self.date_label.config(text=self.current_date.strftime(\"%Y-%m-%d\"))\r\n        self.update_history_display()\r\n    \r\n    def next_day(self):\r\n        self.current_date += timedelta(days=1)\r\n        self.date_label.config(text=self.current_date.strftime(\"%Y-%m-%d\"))\r\n        self.update_history_display()\r\n    \r\n    def set_date_from_entry(self):\r\n        try:\r\n            new_date = datetime.strptime(self.date_entry.get(), \"%Y-%m-%d\").date()\r\n            self.current_date = new_date\r\n            self.date_label.config(text=self.current_date.strftime(\"%Y-%m-%d\"))\r\n            self.update_history_display()\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Date\", \"Please enter a valid date in YYYY-MM-DD format.\")\r\n    \r\n    # -------------------------------\r\n    # Expenses History (Weekly) Methods\r\n    # -------------------------------\r\n    def update_expenses_history_display(self):\r\n        week_end = self.current_week_start + timedelta(days=6)\r\n        self.week_label.config(text=f\"{self.current_week_start.strftime('%Y-%m-%d')} to {week_end.strftime('%Y-%m-%d')}\")\r\n        self.expenses_history_placeholder.config(\r\n            text=f\"No expenses recorded for the week of {self.current_week_start.strftime('%Y-%m-%d')} to {week_end.strftime('%Y-%m-%d')}.\")\r\n    \r\n    def previous_week(self):\r\n        self.current_week_start -= timedelta(weeks=1)\r\n        self.update_expenses_history_display()\r\n    \r\n    def next_week(self):\r\n        self.current_week_start += timedelta(weeks=1)\r\n        self.update_expenses_history_display()\r\n    \r\n    def set_week_from_entry(self):\r\n        try:\r\n            new_date = datetime.strptime(self.week_entry.get(), \"%Y-%m-%d\").date()\r\n            self.current_week_start = new_date - timedelta(days=new_date.weekday())\r\n            self.update_expenses_history_display()\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Date\", \"Please enter a valid date in YYYY-MM-DD format.\")\r\n    \r\n    # -------------------------------\r\n    # Merchandise History (Weekly) Methods\r\n    # -------------------------------\r\n    def update_merch_history_display(self):\r\n        merch_week_end = self.current_merch_week_start + timedelta(days=6)\r\n        self.merch_week_label.config(text=f\"{self.current_merch_week_start.strftime('%Y-%m-%d')} to {merch_week_end.strftime('%Y-%m-%d')}\")\r\n        self.merch_history_placeholder.config(\r\n            text=f\"No merchandise recorded for the week of {self.current_merch_week_start.strftime('%Y-%m-%d')} to {merch_week_end.strftime('%Y-%m-%d')}.\")\r\n    \r\n    def previous_merch_week(self):\r\n        self.current_merch_week_start -= timedelta(weeks=1)\r\n        self.update_merch_history_display()\r\n    \r\n    def next_merch_week(self):\r\n        self.current_merch_week_start += timedelta(weeks=1)\r\n        self.update_merch_history_display()\r\n    \r\n    def set_merch_week_from_entry(self):\r\n        try:\r\n            new_date = datetime.strptime(self.merch_week_entry.get(), \"%Y-%m-%d\").date()\r\n            self.current_merch_week_start = new_date - timedelta(days=new_date.weekday())\r\n            self.update_merch_history_display()\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Date\", \"Please enter a valid date in YYYY-MM-DD format.\")\r\n    \r\n    # -------------------------------\r\n    # Gross Profit (Weekly) Methods\r\n    # -------------------------------\r\n    def update_gross_profit_display(self):\r\n        profit_week_end = self.current_profit_week_start + timedelta(days=6)\r\n        self.profit_week_label.config(text=f\"{self.current_profit_week_start.strftime('%Y-%m-%d')} to {profit_week_end.strftime('%Y-%m-%d')}\")\r\n        # Clear the treeview\r\n        for row in self.gross_profit_tree.get_children():\r\n            self.gross_profit_tree.delete(row)\r\n        # Insert a dummy row for each day of the week (placeholders)\r\n        for i in range(7):\r\n            day = self.current_profit_week_start + timedelta(days=i)\r\n            self.gross_profit_tree.insert(\"\", \"end\", values=(day.strftime(\"%Y-%m-%d\"), \"0\", \"0\", \"0\"))\r\n    \r\n    def previous_profit_week(self):\r\n        self.current_profit_week_start -= timedelta(weeks=1)\r\n        self.update_gross_profit_display()\r\n    \r\n    def next_profit_week(self):\r\n        self.current_profit_week_start += timedelta(weeks=1)\r\n        self.update_gross_profit_display()\r\n    \r\n    def set_profit_week_from_entry(self):\r\n        try:\r\n            new_date = datetime.strptime(self.profit_week_entry.get(), \"%Y-%m-%d\").date()\r\n            self.current_profit_week_start = new_date - timedelta(days=new_date.weekday())\r\n            self.update_gross_profit_display()\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Date\", \"Please enter a valid date in YYYY-MM-DD format.\")\r\n    \r\n    # -------------------------------\r\n    # Payroll Methods\r\n    # -------------------------------\r\n    def get_most_recent_sunday(self, d):\r\n        # Python's weekday(): Monday is 0 ... Sunday is 6\r\n        days_since_sunday = (d.weekday() + 1) % 7\r\n        return d - timedelta(days=days_since_sunday)\r\n    \r\n    def update_payroll_display(self):\r\n        # Clear the treeview\r\n        for row in self.payroll_tree.get_children():\r\n            self.payroll_tree.delete(row)\r\n        # Insert rows for the previous 4 Sundays (including current)\r\n        for i in range(4):\r\n            sunday_date = self.current_payroll_sunday - timedelta(weeks=i)\r\n            self.payroll_tree.insert(\"\", \"end\", values=(sunday_date.strftime(\"%Y-%m-%d\"), \"0\"))\r\n    \r\n    def previous_payroll_week(self):\r\n        self.current_payroll_sunday -= timedelta(weeks=1)\r\n        self.payroll_date_label.config(text=self.current_payroll_sunday.strftime(\"%Y-%m-%d\"))\r\n        self.update_payroll_display()\r\n    \r\n    def next_payroll_week(self):\r\n        self.current_payroll_sunday += timedelta(weeks=1)\r\n        self.payroll_date_label.config(text=self.current_payroll_sunday.strftime(\"%Y-%m-%d\"))\r\n        self.update_payroll_display()\r\n    \r\n    def set_payroll_date_from_entry(self):\r\n        try:\r\n            new_date = datetime.strptime(self.payroll_date_entry.get(), \"%Y-%m-%d\").date()\r\n            self.current_payroll_sunday = self.get_most_recent_sunday(new_date)\r\n            self.payroll_date_label.config(text=self.current_payroll_sunday.strftime(\"%Y-%m-%d\"))\r\n            self.update_payroll_display()\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Date\", \"Please enter a valid date in YYYY-MM-DD format.\")\r\n\r\n\r\n\r\n\r\n# For testing purposes, run this file directly.\r\nif __name__ == '__main__':\r\n    root = tk.Tk()\r\n    root.title(\"EMS Application - Manage Employees\")\r\n    root.geometry(\"900x750\")\r\n    app = ManageEmployees(root, None)\r\n    app.pack(fill=\"both\", expand=True)\r\n    root.mainloop()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/manageEmployees.py b/manageEmployees.py
--- a/manageEmployees.py	(revision 0d63fd4cf7412ed2a613965f9b2c8d3acb2dc17b)
+++ b/manageEmployees.py	(date 1742847891848)
@@ -363,6 +363,7 @@
         tabs["Manage Employees"] = manage_frame
 
 
+
         # -------------------------------
         # Function to Show Selected Tab
         # -------------------------------
@@ -533,7 +534,9 @@
             self.update_gross_profit_display()
         except ValueError:
             messagebox.showerror("Invalid Date", "Please enter a valid date in YYYY-MM-DD format.")
-    
+
+
+
     # -------------------------------
     # Payroll Methods
     # -------------------------------
