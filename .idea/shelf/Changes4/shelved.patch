Index: managerPage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom tkinter import messagebox, ttk\r\nfrom manageEmployees import ManageEmployees\r\n\r\nclass ManagerPage(tk.Frame):\r\n    def __init__(self, parent, controller):\r\n        super().__init__(parent)\r\n        self.controller = controller\r\n        self.configure(bg=\"white\")\r\n\r\n        tk.Label(self, text=\"Manager Dashboard\", font=(\"Helvetica\", 20), bg=\"white\").pack(pady=10)\r\n\r\n        self.manage_employees = ManageEmployees(self, controller)\r\n        self.manage_employees.pack(expand=True, fill=\"both\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/managerPage.py b/managerPage.py
--- a/managerPage.py	(revision 3d2d00fc47eea7ca0074e42efda74896f5effc6f)
+++ b/managerPage.py	(date 1741466134131)
@@ -8,7 +8,5 @@
         self.controller = controller
         self.configure(bg="white")
 
-        tk.Label(self, text="Manager Dashboard", font=("Helvetica", 20), bg="white").pack(pady=10)
-
         self.manage_employees = ManageEmployees(self, controller)
         self.manage_employees.pack(expand=True, fill="both")
Index: ownerPage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk \r\nfrom managerPage import ManagerPage\r\n\r\nclass OwnerPage(ManagerPage):\r\n    def __init__(self, parent, controller):\r\n        super().__init__(parent, controller)\r\n        self.controller = controller\r\n        self.configure(bg=\"white\")\r\n\r\n        tk.Label(self, text=\"Owner Dashboard\", font=(\"Helvetica\", 20), bg=\"white\").pack(pady=10)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ownerPage.py b/ownerPage.py
--- a/ownerPage.py	(revision 3d2d00fc47eea7ca0074e42efda74896f5effc6f)
+++ b/ownerPage.py	(date 1741466515375)
@@ -1,4 +1,7 @@
-import tkinter as tk 
+import tkinter as tk
+
+import manageEmployees
+from manageEmployees import ManageEmployees
 from managerPage import ManagerPage
 
 class OwnerPage(ManagerPage):
@@ -7,4 +10,4 @@
         self.controller = controller
         self.configure(bg="white")
 
-        tk.Label(self, text="Owner Dashboard", font=("Helvetica", 20), bg="white").pack(pady=10)
+        manageEmployees.create_top_frame("Owner")
\ No newline at end of file
Index: manageEmployees.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom tkinter import messagebox, ttk\r\nfrom datetime import datetime, timedelta\r\n\r\nclass ManageEmployees(tk.Frame):\r\n    def __init__(self, parent, controller):\r\n        super().__init__(parent)\r\n        self.controller = controller\r\n        self.configure(bg=\"white\")\r\n\r\n        # Initialize weekly start dates for Expenses, Merchandise, Gross Profit History (set to Monday)\r\n        self.current_week_start = datetime.now().date() - timedelta(days=datetime.now().date().weekday())\r\n        self.current_merch_week_start = datetime.now().date() - timedelta(days=datetime.now().date().weekday())\r\n        self.current_profit_week_start = datetime.now().date() - timedelta(days=datetime.now().date().weekday())\r\n        # For Payroll, initialize with the most recent Sunday\r\n        self.current_payroll_sunday = self.get_most_recent_sunday(datetime.now().date())\r\n        # For Employee History, initialize current date (daily)\r\n        self.current_date = datetime.now().date()\r\n        self.create_bottom_frame()\r\n        # Top frame for store selection dropdown\r\n        top_frame = tk.Frame(self, bg=\"white\", bd=1, relief=\"solid\")\r\n        top_frame.pack(side=\"top\", fill=\"x\", padx=10, pady=10)\r\n\r\n        # Centered label (ALOHA)\r\n        aloha_label = tk.Label(top_frame, text=\"ALOHA\", font=(\"Helvetica\", 14), bg=\"white\", fg=\"black\")\r\n        aloha_label.place(relx=0.5, rely=0.5, anchor=\"center\")\r\n\r\n        # Right label (name of employee)\r\n        tk.Label(top_frame, text=\"Name of employee\", font=(\"Helvetica\", 14), bg=\"white\", fg=\"black\").pack(side=\"right\",\r\n                                                                                                          padx=(5, 10))\r\n\r\n        selected_store = tk.StringVar()\r\n        selected_store.set(\"Store 1\")\r\n        store_options = [\"Store 1\", \"Store 2\", \"Store 3\", \"Store 4\"]\r\n        store_dropdown = tk.OptionMenu(top_frame, selected_store, *store_options)\r\n        store_dropdown.config(font=(\"Helvetica\", 14), bg=\"white\", fg=\"black\", relief=\"solid\", bd=2)\r\n        store_dropdown.pack(side=\"left\", padx=10, pady=5)\r\n\r\n        # Create Main Layout\r\n        main_frame = tk.Frame(self, bg=\"white\")\r\n        main_frame.pack(fill=\"both\", expand=True)\r\n\r\n        # Left Panel for Tabs\r\n        tab_frame = tk.Frame(main_frame, bg=\"white\", width=250, bd=1, relief=\"solid\")\r\n        tab_frame.pack(side=\"left\", fill=\"y\", padx=10, pady=10)\r\n        \r\n        # Right Panel for Content\r\n        content_frame = tk.Frame(main_frame, bg=\"white\", bd=1, relief=\"solid\")\r\n        content_frame.pack(side=\"right\", fill=\"both\", expand=True, padx=10, pady=10)\r\n        content_frame.grid_rowconfigure(0, weight=1)\r\n        content_frame.grid_columnconfigure(0, weight=1)\r\n\r\n        # Dictionary to hold the tabs\r\n        tabs = {}\r\n\r\n        # -------------------------------\r\n        # Enter Invoice Tab (as provided)\r\n        # -------------------------------\r\n        enter_invoice_frame = tk.Frame(content_frame, bg=\"white\")\r\n        enter_invoice_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tk.Label(enter_invoice_frame, text=\"Enter Invoice\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n        \r\n        tk.Label(enter_invoice_frame, text=\"Invoice ID:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        invoice_id = tk.Entry(enter_invoice_frame, font=(\"Helvetica\", 14))\r\n        invoice_id.pack()\r\n        \r\n        tk.Label(enter_invoice_frame, text=\"Date:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        invoice_date = tk.Entry(enter_invoice_frame, font=(\"Helvetica\", 14))\r\n        invoice_date.pack()\r\n        \r\n        tk.Label(enter_invoice_frame, text=\"Company:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        invoice_company = tk.Entry(enter_invoice_frame, font=(\"Helvetica\", 14))\r\n        invoice_company.pack()\r\n        \r\n        tk.Label(enter_invoice_frame, text=\"Paid (Yes/No):\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        invoice_paid = tk.Entry(enter_invoice_frame, font=(\"Helvetica\", 14))\r\n        invoice_paid.pack()\r\n        \r\n        tk.Label(enter_invoice_frame, text=\"Amount:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        invoice_amount = tk.Entry(enter_invoice_frame, font=(\"Helvetica\", 14))\r\n        invoice_amount.pack()\r\n        \r\n        tk.Label(enter_invoice_frame, text=\"Amount Paid:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        amount_paid = tk.Entry(enter_invoice_frame, font=(\"Helvetica\", 14))\r\n        amount_paid.pack()\r\n        \r\n        tk.Button(enter_invoice_frame, text=\"Submit Invoice\", font=(\"Helvetica\", 14), \r\n                  command=lambda: self.submit_invoice(invoice_id.get(), invoice_date.get(), invoice_company.get(), \r\n                                                      invoice_paid.get(), invoice_amount.get(), amount_paid.get())).pack(pady=10)\r\n        \r\n        tabs[\"Enter Invoice\"] = enter_invoice_frame\r\n\r\n        # -------------------------------\r\n        # Enter Expense Tab\r\n        # -------------------------------\r\n        enter_expense_frame = tk.Frame(content_frame, bg=\"white\")\r\n        enter_expense_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tk.Label(enter_expense_frame, text=\"Enter Expense\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n        \r\n        tk.Label(enter_expense_frame, text=\"Expense Type:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        expense_type = tk.Entry(enter_expense_frame, font=(\"Helvetica\", 14))\r\n        expense_type.pack()\r\n        \r\n        tk.Label(enter_expense_frame, text=\"Expense Value:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        expense_value = tk.Entry(enter_expense_frame, font=(\"Helvetica\", 14))\r\n        expense_value.pack()\r\n        \r\n        tk.Label(enter_expense_frame, text=\"Expense Date:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        expense_date = tk.Entry(enter_expense_frame, font=(\"Helvetica\", 14))\r\n        expense_date.pack()\r\n        \r\n        tk.Button(enter_expense_frame, text=\"Submit Expense\", font=(\"Helvetica\", 14),\r\n                  command=lambda: self.submit_expense(expense_type.get(), expense_value.get(), expense_date.get())).pack(pady=10)\r\n        \r\n        tabs[\"Enter Expense\"] = enter_expense_frame\r\n\r\n        # -------------------------------\r\n        # Enter Merchandise Tab\r\n        # -------------------------------\r\n        enter_merch_frame = tk.Frame(content_frame, bg=\"white\")\r\n        enter_merch_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tk.Label(enter_merch_frame, text=\"Enter Merchandise\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n        \r\n        tk.Label(enter_merch_frame, text=\"Merchandise Type:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        merch_type = tk.Entry(enter_merch_frame, font=(\"Helvetica\", 14))\r\n        merch_type.pack()\r\n        \r\n        tk.Label(enter_merch_frame, text=\"Merchandise Value:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        merch_value = tk.Entry(enter_merch_frame, font=(\"Helvetica\", 14))\r\n        merch_value.pack()\r\n        \r\n        tk.Label(enter_merch_frame, text=\"Merchandise Date:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        merch_date = tk.Entry(enter_merch_frame, font=(\"Helvetica\", 14))\r\n        merch_date.pack()\r\n        \r\n        tk.Button(enter_merch_frame, text=\"Submit Merchandise\", font=(\"Helvetica\", 14),\r\n                  command=lambda: self.submit_merchandise(merch_type.get(), merch_value.get(), merch_date.get())).pack(pady=10)\r\n        \r\n        tabs[\"Enter Merchandise\"] = enter_merch_frame\r\n\r\n        # -------------------------------\r\n        # Employee History Tab (Daily)\r\n        # -------------------------------\r\n        employee_history_frame = tk.Frame(content_frame, bg=\"white\")\r\n        employee_history_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tabs[\"Employee History\"] = employee_history_frame\r\n\r\n        tk.Label(employee_history_frame, text=\"Employee History\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        nav_frame = tk.Frame(employee_history_frame, bg=\"white\")\r\n        nav_frame.pack(pady=10)\r\n        prev_button = tk.Button(nav_frame, text=\"<\", font=(\"Helvetica\", 14), command=self.previous_day)\r\n        prev_button.pack(side=\"left\", padx=5)\r\n        self.date_label = tk.Label(nav_frame, text=self.current_date.strftime(\"%Y-%m-%d\"), font=(\"Helvetica\", 14), bg=\"white\")\r\n        self.date_label.pack(side=\"left\", padx=5)\r\n        next_button = tk.Button(nav_frame, text=\">\", font=(\"Helvetica\", 14), command=self.next_day)\r\n        next_button.pack(side=\"left\", padx=5)\r\n\r\n        tk.Label(employee_history_frame, text=\"Enter Date (YYYY-MM-DD):\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(20,5))\r\n        self.date_entry = tk.Entry(employee_history_frame, font=(\"Helvetica\", 14))\r\n        self.date_entry.pack(pady=5)\r\n        tk.Button(employee_history_frame, text=\"Go\", font=(\"Helvetica\", 14), command=self.set_date_from_entry).pack(pady=5)\r\n\r\n        self.history_placeholder = tk.Label(employee_history_frame, text=\"\", font=(\"Helvetica\", 12), bg=\"white\")\r\n        self.history_placeholder.pack(pady=20)\r\n        self.update_history_display()\r\n\r\n        # -------------------------------\r\n        # Expenses History Tab (Weekly)\r\n        # -------------------------------\r\n        expenses_history_frame = tk.Frame(content_frame, bg=\"white\")\r\n        expenses_history_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tabs[\"Expenses History\"] = expenses_history_frame\r\n\r\n        tk.Label(expenses_history_frame, text=\"Expenses History\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        exp_nav_frame = tk.Frame(expenses_history_frame, bg=\"white\")\r\n        exp_nav_frame.pack(pady=10)\r\n        prev_week_btn = tk.Button(exp_nav_frame, text=\"<\", font=(\"Helvetica\", 14), command=self.previous_week)\r\n        prev_week_btn.pack(side=\"left\", padx=5)\r\n        self.week_label = tk.Label(exp_nav_frame, text=\"\", font=(\"Helvetica\", 14), bg=\"white\")\r\n        self.week_label.pack(side=\"left\", padx=5)\r\n        next_week_btn = tk.Button(exp_nav_frame, text=\">\", font=(\"Helvetica\", 14), command=self.next_week)\r\n        next_week_btn.pack(side=\"left\", padx=5)\r\n\r\n        tk.Label(expenses_history_frame, text=\"Enter Date (YYYY-MM-DD):\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(20,5))\r\n        self.week_entry = tk.Entry(expenses_history_frame, font=(\"Helvetica\", 14))\r\n        self.week_entry.pack(pady=5)\r\n        tk.Button(expenses_history_frame, text=\"Go\", font=(\"Helvetica\", 14), command=self.set_week_from_entry).pack(pady=5)\r\n\r\n        self.expenses_history_placeholder = tk.Label(expenses_history_frame, text=\"\", font=(\"Helvetica\", 12), bg=\"white\")\r\n        self.expenses_history_placeholder.pack(pady=20)\r\n        self.update_expenses_history_display()\r\n\r\n        # -------------------------------\r\n        # Merchandise History Tab (Weekly)\r\n        # -------------------------------\r\n        merch_history_frame = tk.Frame(content_frame, bg=\"white\")\r\n        merch_history_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tabs[\"Merchandise History\"] = merch_history_frame\r\n\r\n        tk.Label(merch_history_frame, text=\"Merchandise History\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        merch_nav_frame = tk.Frame(merch_history_frame, bg=\"white\")\r\n        merch_nav_frame.pack(pady=10)\r\n        prev_merch_btn = tk.Button(merch_nav_frame, text=\"<\", font=(\"Helvetica\", 14), command=self.previous_merch_week)\r\n        prev_merch_btn.pack(side=\"left\", padx=5)\r\n        self.merch_week_label = tk.Label(merch_nav_frame, text=\"\", font=(\"Helvetica\", 14), bg=\"white\")\r\n        self.merch_week_label.pack(side=\"left\", padx=5)\r\n        next_merch_btn = tk.Button(merch_nav_frame, text=\">\", font=(\"Helvetica\", 14), command=self.next_merch_week)\r\n        next_merch_btn.pack(side=\"left\", padx=5)\r\n\r\n        tk.Label(merch_history_frame, text=\"Enter Date (YYYY-MM-DD):\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(20,5))\r\n        self.merch_week_entry = tk.Entry(merch_history_frame, font=(\"Helvetica\", 14))\r\n        self.merch_week_entry.pack(pady=5)\r\n        tk.Button(merch_history_frame, text=\"Go\", font=(\"Helvetica\", 14), command=self.set_merch_week_from_entry).pack(pady=5)\r\n\r\n        self.merch_history_placeholder = tk.Label(merch_history_frame, text=\"\", font=(\"Helvetica\", 12), bg=\"white\")\r\n        self.merch_history_placeholder.pack(pady=20)\r\n        self.update_merch_history_display()\r\n\r\n        # -------------------------------\r\n        # Gross Profit Tab (Weekly)\r\n        # -------------------------------\r\n        gross_profit_frame = tk.Frame(content_frame, bg=\"white\")\r\n        gross_profit_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tabs[\"Gross Profit\"] = gross_profit_frame\r\n\r\n        tk.Label(gross_profit_frame, text=\"Gross Profit\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        profit_nav_frame = tk.Frame(gross_profit_frame, bg=\"white\")\r\n        profit_nav_frame.pack(pady=10)\r\n        prev_profit_btn = tk.Button(profit_nav_frame, text=\"<\", font=(\"Helvetica\", 14), command=self.previous_profit_week)\r\n        prev_profit_btn.pack(side=\"left\", padx=5)\r\n        self.profit_week_label = tk.Label(profit_nav_frame, text=\"\", font=(\"Helvetica\", 14), bg=\"white\")\r\n        self.profit_week_label.pack(side=\"left\", padx=5)\r\n        next_profit_btn = tk.Button(profit_nav_frame, text=\">\", font=(\"Helvetica\", 14), command=self.next_profit_week)\r\n        next_profit_btn.pack(side=\"left\", padx=5)\r\n\r\n        tk.Label(gross_profit_frame, text=\"Enter Date (YYYY-MM-DD):\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(20,5))\r\n        self.profit_week_entry = tk.Entry(gross_profit_frame, font=(\"Helvetica\", 14))\r\n        self.profit_week_entry.pack(pady=5)\r\n        tk.Button(gross_profit_frame, text=\"Go\", font=(\"Helvetica\", 14), command=self.set_profit_week_from_entry).pack(pady=5)\r\n\r\n        # Create a Treeview for the gross profit table\r\n        self.gross_profit_tree = ttk.Treeview(gross_profit_frame, columns=(\"Date\", \"Cash\", \"Credit\", \"Total\"), show=\"headings\")\r\n        self.gross_profit_tree.heading(\"Date\", text=\"Date\")\r\n        self.gross_profit_tree.heading(\"Cash\", text=\"Cash\")\r\n        self.gross_profit_tree.heading(\"Credit\", text=\"Credit\")\r\n        self.gross_profit_tree.heading(\"Total\", text=\"Total\")\r\n        self.gross_profit_tree.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n        self.update_gross_profit_display()\r\n\r\n        # -------------------------------\r\n        # Payroll Tab\r\n        # -------------------------------\r\n        payroll_frame = tk.Frame(content_frame, bg=\"white\")\r\n        payroll_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        tabs[\"Payroll\"] = payroll_frame\r\n\r\n        tk.Label(payroll_frame, text=\"Payroll\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n\r\n        # Employee selection dropdown\r\n        tk.Label(payroll_frame, text=\"Select Employee:\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(10,5))\r\n        self.payroll_employee_var = tk.StringVar()\r\n        self.payroll_employee_var.set(\"Alice\")\r\n        employees = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\r\n        payroll_dropdown = tk.OptionMenu(payroll_frame, self.payroll_employee_var, *employees)\r\n        payroll_dropdown.config(font=(\"Helvetica\", 14), bg=\"white\")\r\n        payroll_dropdown.pack(pady=5)\r\n\r\n        # Payroll navigation\r\n        payroll_nav_frame = tk.Frame(payroll_frame, bg=\"white\")\r\n        payroll_nav_frame.pack(pady=10)\r\n        payroll_prev_btn = tk.Button(payroll_nav_frame, text=\"<\", font=(\"Helvetica\", 14), command=self.previous_payroll_week)\r\n        payroll_prev_btn.pack(side=\"left\", padx=5)\r\n        self.payroll_date_label = tk.Label(payroll_nav_frame, text=self.current_payroll_sunday.strftime(\"%Y-%m-%d\"), font=(\"Helvetica\", 14), bg=\"white\")\r\n        self.payroll_date_label.pack(side=\"left\", padx=5)\r\n        payroll_next_btn = tk.Button(payroll_nav_frame, text=\">\", font=(\"Helvetica\", 14), command=self.next_payroll_week)\r\n        payroll_next_btn.pack(side=\"left\", padx=5)\r\n\r\n        tk.Label(payroll_frame, text=\"Enter Date (YYYY-MM-DD):\", font=(\"Helvetica\", 14), bg=\"white\").pack(pady=(20,5))\r\n        self.payroll_date_entry = tk.Entry(payroll_frame, font=(\"Helvetica\", 14))\r\n        self.payroll_date_entry.pack(pady=5)\r\n        tk.Button(payroll_frame, text=\"Go\", font=(\"Helvetica\", 14), command=self.set_payroll_date_from_entry).pack(pady=5)\r\n\r\n        # Payroll table showing previous 4 Sundays and pay (placeholder)\r\n        self.payroll_tree = ttk.Treeview(payroll_frame, columns=(\"Date\", \"Pay\"), show=\"headings\")\r\n        self.payroll_tree.heading(\"Date\", text=\"Date\")\r\n        self.payroll_tree.heading(\"Pay\", text=\"Pay\")\r\n        self.payroll_tree.pack(fill=\"both\", expand=True, padx=10, pady=10)\r\n        self.update_payroll_display()\r\n\r\n        # -------------------------------\r\n        # Manage Employees Tab (Notebook)\r\n        # -------------------------------\r\n        manage_frame = tk.Frame(content_frame, bg=\"white\")\r\n        manage_frame.grid(row=0, column=0, sticky=\"nsew\")\r\n        notebook = ttk.Notebook(manage_frame)\r\n        notebook.pack(expand=True, fill=\"both\")\r\n\r\n        # Add Employee Tab\r\n        add_employee_frame = tk.Frame(notebook, bg=\"white\")\r\n        tk.Label(add_employee_frame, text=\"Add Employee\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n        tk.Label(add_employee_frame, text=\"Name:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        emp_name = tk.Entry(add_employee_frame, font=(\"Helvetica\", 14))\r\n        emp_name.pack()\r\n        tk.Label(add_employee_frame, text=\"Username:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        emp_username = tk.Entry(add_employee_frame, font=(\"Helvetica\", 14))\r\n        emp_username.pack()\r\n        tk.Label(add_employee_frame, text=\"Password:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        emp_password = tk.Entry(add_employee_frame, font=(\"Helvetica\", 14), show=\"*\")\r\n        emp_password.pack()\r\n        tk.Label(add_employee_frame, text=\"Bonus Percentage:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        emp_bonus = tk.Entry(add_employee_frame, font=(\"Helvetica\", 14))\r\n        emp_bonus.pack()\r\n        tk.Button(add_employee_frame, text=\"Add Employee\", font=(\"Helvetica\", 14), \r\n                  command=lambda: self.add_employee(emp_name.get(), emp_username.get(), emp_password.get(), emp_bonus.get())).pack(pady=10)\r\n        \r\n        # Delete Employee Tab\r\n        delete_employee_frame = tk.Frame(notebook, bg=\"white\")\r\n        tk.Label(delete_employee_frame, text=\"Delete Employee\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n        tk.Label(delete_employee_frame, text=\"Username:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        del_username = tk.Entry(delete_employee_frame, font=(\"Helvetica\", 14))\r\n        del_username.pack()\r\n        tk.Button(delete_employee_frame, text=\"Delete\", font=(\"Helvetica\", 14), \r\n                  command=lambda: self.delete_employee(del_username.get())).pack(pady=10)\r\n        \r\n        # Edit Employee Tab\r\n        edit_employee_frame = tk.Frame(notebook, bg=\"white\")\r\n        tk.Label(edit_employee_frame, text=\"Edit Employee\", font=(\"Helvetica\", 18), bg=\"white\").pack(pady=10)\r\n        tk.Label(edit_employee_frame, text=\"Username:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        edit_username = tk.Entry(edit_employee_frame, font=(\"Helvetica\", 14))\r\n        edit_username.pack()\r\n        tk.Label(edit_employee_frame, text=\"New Password:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        new_password = tk.Entry(edit_employee_frame, font=(\"Helvetica\", 14), show=\"*\")\r\n        new_password.pack()\r\n        tk.Label(edit_employee_frame, text=\"Edit Bonus Percentage:\", font=(\"Helvetica\", 14), bg=\"white\").pack()\r\n        new_bonus = tk.Entry(edit_employee_frame, font=(\"Helvetica\", 14))\r\n        new_bonus.pack()\r\n        tk.Button(edit_employee_frame, text=\"Update\", font=(\"Helvetica\", 14), \r\n                  command=lambda: self.edit_employee(edit_username.get(), new_password.get(), new_bonus.get())).pack(pady=10)\r\n        \r\n        notebook.add(add_employee_frame, text=\"Add Employee\")\r\n        notebook.add(delete_employee_frame, text=\"Delete Employee\")\r\n        notebook.add(edit_employee_frame, text=\"Edit Employee\")\r\n        \r\n        tabs[\"Manage Employees\"] = manage_frame\r\n\r\n\r\n        # -------------------------------\r\n        # Function to Show Selected Tab\r\n        # -------------------------------\r\n        def show_tab(tab_name):\r\n            tabs[tab_name].tkraise()\r\n        \r\n        for title in tabs:\r\n            btn = tk.Button(tab_frame, text=title, font=(\"Helvetica\", 14), fg=\"black\", bg=\"white\",\r\n                            relief=\"solid\", bd=2, command=lambda t=title: show_tab(t), width=25, height=2)\r\n            btn.pack(pady=5, padx=10, fill=\"x\")\r\n        \r\n        # Show the default tab\r\n        show_tab(\"Enter Invoice\")\r\n    \r\n    # -------------------------------\r\n    # Placeholder Methods\r\n    # -------------------------------\r\n\r\n    def create_bottom_frame(self):\r\n        \"\"\"Creates a bottom frame for the logout button.\"\"\"\r\n        bottom_frame = tk.Frame(self, bg=\"white\", bd=1, relief=\"solid\")\r\n        bottom_frame.pack(side=\"bottom\", fill=\"x\", padx=10, pady=10)\r\n\r\n        logout_button = tk.Button(bottom_frame, text=\"Logout\", font=(\"Helvetica\", 14), bg=\"red\", fg=\"white\",\r\n                                  command=self.logout)\r\n        logout_button.pack(side=\"left\", padx=10, pady=5)\r\n\r\n    def logout(self):\r\n        \"\"\"Handles logout and returns to the login page.\"\"\"\r\n        confirm = messagebox.askyesno(\"Logout\", \"Are you sure you want to logout?\")\r\n        if confirm:\r\n            self.controller.show_frame(\"LoginPage\")\r\n    def submit_invoice(self, invoice_id, invoice_date, invoice_company, invoice_paid, invoice_amount, amount_paid):\r\n        messagebox.showinfo(\"Submit Invoice\", f\"Invoice {invoice_id} submitted!\")\r\n    \r\n    def submit_expense(self, expense_type, expense_value, expense_date):\r\n        messagebox.showinfo(\"Submit Expense\", f\"Expense '{expense_type}' submitted!\")\r\n    \r\n    def submit_merchandise(self, merch_type, merch_value, merch_date):\r\n        messagebox.showinfo(\"Submit Merchandise\", f\"Merchandise '{merch_type}' submitted!\")\r\n    \r\n    def add_employee(self, name, username, password, bonus):\r\n        if not name or not username or not password:\r\n            messagebox.showerror(\"Error\", \"All fields must be filled out.\")\r\n            return\r\n        messagebox.showinfo(\"Success\", f\"Employee {name} added successfully!\")\r\n    \r\n    def delete_employee(self, username):\r\n        if not username:\r\n            messagebox.showerror(\"Error\", \"Username is required.\")\r\n            return\r\n        messagebox.showinfo(\"Success\", f\"Employee {username} deleted successfully!\")\r\n    \r\n    def edit_employee(self, username, password, bonus):\r\n        if not username:\r\n            messagebox.showerror(\"Error\", \"Username is required.\")\r\n            return\r\n        messagebox.showinfo(\"Success\", f\"Employee {username} updated successfully!\")\r\n    \r\n    # -------------------------------\r\n    # Employee History (Daily) Methods\r\n    # -------------------------------\r\n    def update_history_display(self):\r\n        self.history_placeholder.config(text=f\"No clock-in records for {self.current_date.strftime('%Y-%m-%d')}.\")\r\n    \r\n    def previous_day(self):\r\n        self.current_date -= timedelta(days=1)\r\n        self.date_label.config(text=self.current_date.strftime(\"%Y-%m-%d\"))\r\n        self.update_history_display()\r\n    \r\n    def next_day(self):\r\n        self.current_date += timedelta(days=1)\r\n        self.date_label.config(text=self.current_date.strftime(\"%Y-%m-%d\"))\r\n        self.update_history_display()\r\n    \r\n    def set_date_from_entry(self):\r\n        try:\r\n            new_date = datetime.strptime(self.date_entry.get(), \"%Y-%m-%d\").date()\r\n            self.current_date = new_date\r\n            self.date_label.config(text=self.current_date.strftime(\"%Y-%m-%d\"))\r\n            self.update_history_display()\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Date\", \"Please enter a valid date in YYYY-MM-DD format.\")\r\n    \r\n    # -------------------------------\r\n    # Expenses History (Weekly) Methods\r\n    # -------------------------------\r\n    def update_expenses_history_display(self):\r\n        week_end = self.current_week_start + timedelta(days=6)\r\n        self.week_label.config(text=f\"{self.current_week_start.strftime('%Y-%m-%d')} to {week_end.strftime('%Y-%m-%d')}\")\r\n        self.expenses_history_placeholder.config(\r\n            text=f\"No expenses recorded for the week of {self.current_week_start.strftime('%Y-%m-%d')} to {week_end.strftime('%Y-%m-%d')}.\")\r\n    \r\n    def previous_week(self):\r\n        self.current_week_start -= timedelta(weeks=1)\r\n        self.update_expenses_history_display()\r\n    \r\n    def next_week(self):\r\n        self.current_week_start += timedelta(weeks=1)\r\n        self.update_expenses_history_display()\r\n    \r\n    def set_week_from_entry(self):\r\n        try:\r\n            new_date = datetime.strptime(self.week_entry.get(), \"%Y-%m-%d\").date()\r\n            self.current_week_start = new_date - timedelta(days=new_date.weekday())\r\n            self.update_expenses_history_display()\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Date\", \"Please enter a valid date in YYYY-MM-DD format.\")\r\n    \r\n    # -------------------------------\r\n    # Merchandise History (Weekly) Methods\r\n    # -------------------------------\r\n    def update_merch_history_display(self):\r\n        merch_week_end = self.current_merch_week_start + timedelta(days=6)\r\n        self.merch_week_label.config(text=f\"{self.current_merch_week_start.strftime('%Y-%m-%d')} to {merch_week_end.strftime('%Y-%m-%d')}\")\r\n        self.merch_history_placeholder.config(\r\n            text=f\"No merchandise recorded for the week of {self.current_merch_week_start.strftime('%Y-%m-%d')} to {merch_week_end.strftime('%Y-%m-%d')}.\")\r\n    \r\n    def previous_merch_week(self):\r\n        self.current_merch_week_start -= timedelta(weeks=1)\r\n        self.update_merch_history_display()\r\n    \r\n    def next_merch_week(self):\r\n        self.current_merch_week_start += timedelta(weeks=1)\r\n        self.update_merch_history_display()\r\n    \r\n    def set_merch_week_from_entry(self):\r\n        try:\r\n            new_date = datetime.strptime(self.merch_week_entry.get(), \"%Y-%m-%d\").date()\r\n            self.current_merch_week_start = new_date - timedelta(days=new_date.weekday())\r\n            self.update_merch_history_display()\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Date\", \"Please enter a valid date in YYYY-MM-DD format.\")\r\n    \r\n    # -------------------------------\r\n    # Gross Profit (Weekly) Methods\r\n    # -------------------------------\r\n    def update_gross_profit_display(self):\r\n        profit_week_end = self.current_profit_week_start + timedelta(days=6)\r\n        self.profit_week_label.config(text=f\"{self.current_profit_week_start.strftime('%Y-%m-%d')} to {profit_week_end.strftime('%Y-%m-%d')}\")\r\n        # Clear the treeview\r\n        for row in self.gross_profit_tree.get_children():\r\n            self.gross_profit_tree.delete(row)\r\n        # Insert a dummy row for each day of the week (placeholders)\r\n        for i in range(7):\r\n            day = self.current_profit_week_start + timedelta(days=i)\r\n            self.gross_profit_tree.insert(\"\", \"end\", values=(day.strftime(\"%Y-%m-%d\"), \"0\", \"0\", \"0\"))\r\n    \r\n    def previous_profit_week(self):\r\n        self.current_profit_week_start -= timedelta(weeks=1)\r\n        self.update_gross_profit_display()\r\n    \r\n    def next_profit_week(self):\r\n        self.current_profit_week_start += timedelta(weeks=1)\r\n        self.update_gross_profit_display()\r\n    \r\n    def set_profit_week_from_entry(self):\r\n        try:\r\n            new_date = datetime.strptime(self.profit_week_entry.get(), \"%Y-%m-%d\").date()\r\n            self.current_profit_week_start = new_date - timedelta(days=new_date.weekday())\r\n            self.update_gross_profit_display()\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Date\", \"Please enter a valid date in YYYY-MM-DD format.\")\r\n    \r\n    # -------------------------------\r\n    # Payroll Methods\r\n    # -------------------------------\r\n    def get_most_recent_sunday(self, d):\r\n        # Python's weekday(): Monday is 0 ... Sunday is 6\r\n        days_since_sunday = (d.weekday() + 1) % 7\r\n        return d - timedelta(days=days_since_sunday)\r\n    \r\n    def update_payroll_display(self):\r\n        # Clear the treeview\r\n        for row in self.payroll_tree.get_children():\r\n            self.payroll_tree.delete(row)\r\n        # Insert rows for the previous 4 Sundays (including current)\r\n        for i in range(4):\r\n            sunday_date = self.current_payroll_sunday - timedelta(weeks=i)\r\n            self.payroll_tree.insert(\"\", \"end\", values=(sunday_date.strftime(\"%Y-%m-%d\"), \"0\"))\r\n    \r\n    def previous_payroll_week(self):\r\n        self.current_payroll_sunday -= timedelta(weeks=1)\r\n        self.payroll_date_label.config(text=self.current_payroll_sunday.strftime(\"%Y-%m-%d\"))\r\n        self.update_payroll_display()\r\n    \r\n    def next_payroll_week(self):\r\n        self.current_payroll_sunday += timedelta(weeks=1)\r\n        self.payroll_date_label.config(text=self.current_payroll_sunday.strftime(\"%Y-%m-%d\"))\r\n        self.update_payroll_display()\r\n    \r\n    def set_payroll_date_from_entry(self):\r\n        try:\r\n            new_date = datetime.strptime(self.payroll_date_entry.get(), \"%Y-%m-%d\").date()\r\n            self.current_payroll_sunday = self.get_most_recent_sunday(new_date)\r\n            self.payroll_date_label.config(text=self.current_payroll_sunday.strftime(\"%Y-%m-%d\"))\r\n            self.update_payroll_display()\r\n        except ValueError:\r\n            messagebox.showerror(\"Invalid Date\", \"Please enter a valid date in YYYY-MM-DD format.\")\r\n\r\n# For testing purposes, run this file directly.\r\nif __name__ == '__main__':\r\n    root = tk.Tk()\r\n    root.title(\"EMS Application - Manage Employees\")\r\n    root.geometry(\"900x750\")\r\n    app = ManageEmployees(root, None)\r\n    app.pack(fill=\"both\", expand=True)\r\n    root.mainloop()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/manageEmployees.py b/manageEmployees.py
--- a/manageEmployees.py	(revision 3d2d00fc47eea7ca0074e42efda74896f5effc6f)
+++ b/manageEmployees.py	(date 1741466542708)
@@ -17,17 +17,21 @@
         # For Employee History, initialize current date (daily)
         self.current_date = datetime.now().date()
         self.create_bottom_frame()
+
+    # creates the top part
+    def create_top_frame(self,role):
         # Top frame for store selection dropdown
         top_frame = tk.Frame(self, bg="white", bd=1, relief="solid")
         top_frame.pack(side="top", fill="x", padx=10, pady=10)
 
         # Centered label (ALOHA)
-        aloha_label = tk.Label(top_frame, text="ALOHA", font=("Helvetica", 14), bg="white", fg="black")
+        aloha_label = tk.Label(top_frame, text=f"{role} Dashboard", font=("Helvetica", 14), bg="white", fg="black")
         aloha_label.place(relx=0.5, rely=0.5, anchor="center")
 
         # Right label (name of employee)
-        tk.Label(top_frame, text="Name of employee", font=("Helvetica", 14), bg="white", fg="black").pack(side="right",
-                                                                                                          padx=(5, 10))
+        tk.Label(top_frame, text="Name of employee", font=("Helvetica", 14), bg="white", fg="black").pack(
+            side="right",
+            padx=(5, 10))
 
         selected_store = tk.StringVar()
         selected_store.set("Store 1")
@@ -35,7 +39,6 @@
         store_dropdown = tk.OptionMenu(top_frame, selected_store, *store_options)
         store_dropdown.config(font=("Helvetica", 14), bg="white", fg="black", relief="solid", bd=2)
         store_dropdown.pack(side="left", padx=10, pady=5)
-
         # Create Main Layout
         main_frame = tk.Frame(self, bg="white")
         main_frame.pack(fill="both", expand=True)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"1273df12-f704-48bc-b0d1-73903eeefc88\" name=\"Changes\" comment=\"made\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/empPage.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/empPage.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/manageEmployees.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/manageEmployees.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;DanielJaffeProjects&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/DanielJaffeProjects/Employee-application.git&quot;,\r\n    &quot;accountId&quot;: &quot;91c662e2-bbe2-4e9c-8c90-a67d3f4145ee&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2tsSfy8edG6w5uyQjivXBQHiNuX\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Python.empPage.executor\": \"Run\",\r\n    \"Python.ems.executor\": \"Run\",\r\n    \"Python.login.executor\": \"Run\",\r\n    \"Python.manageEmployees.executor\": \"Run\",\r\n    \"Python.managerPage.executor\": \"Run\",\r\n    \"Python.ownerPage.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"last_opened_file_path\": \"C:/Users/drjed/OneDrive/Documents/GitHub/Employee-application\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-822845ee3bb5-JavaScript-PY-243.23654.177\" />\r\n        <option value=\"bundled-python-sdk-91d3a02ef49d-43b77aa2d136-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-243.23654.177\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"1273df12-f704-48bc-b0d1-73903eeefc88\" name=\"Changes\" comment=\"\" />\r\n      <created>1741139395654</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1741139395654</updated>\r\n      <workItem from=\"1741139396833\" duration=\"39000\" />\r\n      <workItem from=\"1741188109676\" duration=\"2860000\" />\r\n      <workItem from=\"1741193751555\" duration=\"530000\" />\r\n      <workItem from=\"1741195127453\" duration=\"5681000\" />\r\n      <workItem from=\"1741208821762\" duration=\"2208000\" />\r\n      <workItem from=\"1741353788940\" duration=\"991000\" />\r\n      <workItem from=\"1741449184501\" duration=\"269000\" />\r\n      <workItem from=\"1741458480908\" duration=\"3765000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Added title to login page as well as ad justified the width of the username and password box. Change employee so it has regular in balance and out balance and removed unnecessary things.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741197688889</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741197688889</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"added history so that you can see the prior in balance and out balances as well and when clock in and out\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741199595129</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741199595129</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"added a header to employee and reformated the ones for manager and owner\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1741202026556</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1741202026556</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Added title to login page as well as ad justified the width of the username and password box. Change employee so it has regular in balance and out balance and removed unnecessary things.\" />\r\n    <MESSAGE value=\"added history so that you can see the prior in balance and out balances as well and when clock in and out\" />\r\n    <MESSAGE value=\"added a header to employee and reformated the ones for manager and owner\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"added a header to employee and reformated the ones for manager and owner\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/Employee_application$ems.coverage\" NAME=\"ems Coverage Results\" MODIFIED=\"1741464757923\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Employee_application$ownerPage.coverage\" NAME=\"ownerPage Coverage Results\" MODIFIED=\"1741460856220\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Employee_application$managerPage.coverage\" NAME=\"managerPage Coverage Results\" MODIFIED=\"1741464753332\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Employee_application$login.coverage\" NAME=\"login Coverage Results\" MODIFIED=\"1741209022060\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Employee_application$empPage.coverage\" NAME=\"empPage Coverage Results\" MODIFIED=\"1741464666303\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Employee_application$manageEmployees.coverage\" NAME=\"manageEmployees Coverage Results\" MODIFIED=\"1741463583383\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 3d2d00fc47eea7ca0074e42efda74896f5effc6f)
+++ b/.idea/workspace.xml	(date 1741466519578)
@@ -4,10 +4,11 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="1273df12-f704-48bc-b0d1-73903eeefc88" name="Changes" comment="made">
+    <list default="true" id="1273df12-f704-48bc-b0d1-73903eeefc88" name="Changes" comment="add the border back to the buttons for all roles. Added border and changed color to logout button. Added top frame back for manager and owner. Added logout back to manager and owner. Also made the tabs smaller so it fits for all roles.">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/empPage.py" beforeDir="false" afterPath="$PROJECT_DIR$/empPage.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/manageEmployees.py" beforeDir="false" afterPath="$PROJECT_DIR$/manageEmployees.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/managerPage.py" beforeDir="false" afterPath="$PROJECT_DIR$/managerPage.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ownerPage.py" beforeDir="false" afterPath="$PROJECT_DIR$/ownerPage.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -80,7 +81,7 @@
       <workItem from="1741208821762" duration="2208000" />
       <workItem from="1741353788940" duration="991000" />
       <workItem from="1741449184501" duration="269000" />
-      <workItem from="1741458480908" duration="3765000" />
+      <workItem from="1741458480908" duration="5291000" />
     </task>
     <task id="LOCAL-00001" summary="Added title to login page as well as ad justified the width of the username and password box. Change employee so it has regular in balance and out balance and removed unnecessary things.">
       <option name="closed" value="true" />
@@ -106,7 +107,15 @@
       <option name="project" value="LOCAL" />
       <updated>1741202026556</updated>
     </task>
-    <option name="localTasksCounter" value="4" />
+    <task id="LOCAL-00004" summary="add the border back to the buttons for all roles. Added border and changed color to logout button. Added top frame back for manager and owner. Added logout back to manager and owner. Also made the tabs smaller so it fits for all roles.">
+      <option name="closed" value="true" />
+      <created>1741464930036</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1741464930036</updated>
+    </task>
+    <option name="localTasksCounter" value="5" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -116,12 +125,13 @@
     <MESSAGE value="Added title to login page as well as ad justified the width of the username and password box. Change employee so it has regular in balance and out balance and removed unnecessary things." />
     <MESSAGE value="added history so that you can see the prior in balance and out balances as well and when clock in and out" />
     <MESSAGE value="added a header to employee and reformated the ones for manager and owner" />
-    <option name="LAST_COMMIT_MESSAGE" value="added a header to employee and reformated the ones for manager and owner" />
+    <MESSAGE value="add the border back to the buttons for all roles. Added border and changed color to logout button. Added top frame back for manager and owner. Added logout back to manager and owner. Also made the tabs smaller so it fits for all roles." />
+    <option name="LAST_COMMIT_MESSAGE" value="add the border back to the buttons for all roles. Added border and changed color to logout button. Added top frame back for manager and owner. Added logout back to manager and owner. Also made the tabs smaller so it fits for all roles." />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/Employee_application$ems.coverage" NAME="ems Coverage Results" MODIFIED="1741464757923" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Employee_application$ownerPage.coverage" NAME="ownerPage Coverage Results" MODIFIED="1741460856220" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Employee_application$managerPage.coverage" NAME="managerPage Coverage Results" MODIFIED="1741464753332" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Employee_application$ems.coverage" NAME="ems Coverage Results" MODIFIED="1741466518142" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Employee_application$ownerPage.coverage" NAME="ownerPage Coverage Results" MODIFIED="1741466515484" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Employee_application$managerPage.coverage" NAME="managerPage Coverage Results" MODIFIED="1741466134212" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Employee_application$login.coverage" NAME="login Coverage Results" MODIFIED="1741209022060" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Employee_application$empPage.coverage" NAME="empPage Coverage Results" MODIFIED="1741464666303" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Employee_application$manageEmployees.coverage" NAME="manageEmployees Coverage Results" MODIFIED="1741463583383" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
